package com.lenovo.ailab.smartedge.service;

import java.io.*;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.codec.binary.Base64;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.mock.web.MockMultipartFile;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;
import com.lenovo.ailab.smartedge.common.CommonParams;
import com.lenovo.ailab.smartedge.config.CompressionFile;
import com.lenovo.ailab.smartedge.config.ParseCompressedFile;
import com.lenovo.ailab.smartedge.config.RedisHelper;
import com.lenovo.ailab.smartedge.config.TreeConfig;
import com.lenovo.ailab.smartedge.controller.DeviceController;
import com.lenovo.ailab.smartedge.dao.*;
import com.lenovo.ailab.smartedge.dao.po.*;
import com.lenovo.ailab.smartedge.dao.vo.*;
import com.lenovo.ailab.smartedge.utils.ResponseModel;
import com.lenovo.ailab.smartedge.utils.TimeUtil;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.entity.ContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.lenovo.ailab.smartedge.domain.PageRequest;
import com.lenovo.ailab.smartedge.domain.PageResult;
import com.lenovo.ailab.smartedge.utils.PageUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpServletResponse;


/**
 * Title: DepartmentServiceImpl.java
 * 
 * @Autohr "chenpeng"
 * @data 2019年12月3日
 * @Email chenpeng10@lenovo.com
 * @description:
 **/
@Service
@CacheConfig(cacheNames = "depment")
public class DepartmentServiceImpl implements DepartmentService {
    private static final Logger logger = LoggerFactory.getLogger(DeviceController.class);
	@Autowired
	DepartmentMapper departmentMapper;
	@Autowired
	DepartmentDeviceMapper deviceMapper;
	@Autowired
	DepartmentDeviceTopologyMapper topologyMapper;
	@Autowired
	EdgeDeviceService edgeDeviceService;
    @Autowired
    OperatingSystemMapper osystemMapper;
    @Autowired
    HardwareMapper hardwareMapper;
    @Autowired
    EdgeDeviceMapper edgeDeviceMapper;
    @Autowired
    SoftwareMapper softwareMapper;
    @Autowired
    EdgeDeviceHardwareMapper deviceHardwareMapper;
    @Autowired
    EdgeDeviceSoftwareMapper edgeDeviceSoftwareMapper;
    @Autowired
	EdgeServiceImpl edgeServiceImpl;
    @Autowired
    private RestTemplate restTemplate;
    @Value("${token.url}")
    String GET_JWT_TOKEN_URL;
    @Autowired
    private RedisHelper redisHelper;
    @Autowired
    ResourceServiceImpl resourceServiceImpl;
    @Value("${controlServer.url}")
    String CONTROL_SERVER_INIT;
    @Value("${face.server-url}")
    String FACE_SERVER;

	@Override
	/*@Caching(evict = { @CacheEvict(cacheNames = "department", key = "#id"),
			@CacheEvict(cacheNames = "allDepartment", allEntries = true) })*/
	@Transactional(rollbackFor = Exception.class)
	public int deleteDepartmentById(Integer id) {
	    // 1.删除店铺<手动设置为负值>
        //String code = "-" + id;
        int result = departmentMapper.deleteByPrimaryKey(id);
        // 2.删除相关配置单
        deviceMapper.deleteByPrimaryKey(id);
        return result;
	}

	@Override
	//@CacheEvict(cacheNames = "allDepartment", allEntries = true)
	public ResponseModel insertDepartment(Department record) {
	    // 1.code不能为空
	    if(StringUtils.isBlank(record.getBtitdCode())){
	        return ResponseModel.fail("code 不能为空 ！",-1);
        }
        // 2.code 不能重复
        Department department = departmentMapper.selectByBtitDepartmentCode(record.getBtitdCode());
        if(null != department){
            return ResponseModel.fail("code 已存在 ！",-1);
        }
        int id = departmentMapper.insert(record);
        // 3.创建人脸注册组
       // addFaceGroupFromParam(record);
        record.setId(record.getId());
        return ResponseModel.ok(record);
	}

    public ResponseModel addFaceGroupFromParam(Department record) {
	    try{
            // 1.创建组
            // 1.1 查询库 aimine的id
            ResponseModel responseModel = restTemplate.getForObject(FACE_SERVER + "/rest/cv/facelibraryraries/developerLibraries?keyword=aimachine&page=1&limit=10",
                    ResponseModel.class);
            HashMap<String,Object> hashMapForData = (HashMap<String, Object>) responseModel.getResult();
            List<FaceOfLibrary> faceOfLibraryList = (List<FaceOfLibrary>) hashMapForData.get("data");
            if(null == faceOfLibraryList){
                return ResponseModel.fail("人脸库为空！",-1);
            }
            String s = JSONArray.toJSONString(faceOfLibraryList);
            List<FaceOfLibrary> faceOfLibraries = JSONArray.parseArray(s, FaceOfLibrary.class);
            FaceOfLibrary faceOfLibrary = faceOfLibraries.get(0);
            Integer libId = faceOfLibrary.getId();
            // 1.2 创建组
            HashMap<String, Object> hashMap = new HashMap<>();
            hashMap.put("description","smartstore-operation");
            hashMap.put("libId",libId);
            hashMap.put("name",record.getBtitdCode());

            ResponseModel responseResult = restTemplate.postForObject(FACE_SERVER + "/rest/cv/facegroups",
                    hashMap, ResponseModel.class);
            HashMap<String, Object> hashMap2 = new HashMap<>();
            hashMap2.put("description","smartstore-operation");
            hashMap2.put("libId",libId);
            hashMap2.put("name",record.getBtitdCode()+"_member");

            ResponseModel responseResult2 = restTemplate.postForObject(FACE_SERVER + "/rest/cv/facegroups", hashMap2, ResponseModel.class);

            HashMap<String, Object> hashMap3 = new HashMap<>();
            hashMap3.put("description","smartstore-operation");
            hashMap3.put("libId",libId);
            hashMap3.put("name",record.getBtitdCode()+"_clerk");

            ResponseModel responseResult3 = restTemplate.postForObject(FACE_SERVER + "/rest/cv/facegroups", hashMap3, ResponseModel.class);
            /*if(responseResult3.getStatus() != 0 || responseResult2.getStatus() != 0 || responseResult.getStatus() != 0){
                return ResponseModel.fail("insert face of group error！",-1);
            }*/
            String personId = String.valueOf(System.currentTimeMillis());
            // 2.创建用户选择组
            // 2.1 查询组
            ResponseModel responseResult5 = restTemplate.getForObject(FACE_SERVER + "/rest/cv/facegroups/names",
                    ResponseModel.class);
            String s1 = JSONArray.toJSONString(responseResult5.getResult());
            if(StringUtils.isBlank(s1)){
                return ResponseModel.fail("select face of group list is null！",-1);
            }
            List<GroupBean> groupBeans = JSONArray.parseArray(s1, GroupBean.class);
            List<String> ids = new ArrayList<>();

            for(GroupBean groupBean1: groupBeans){
                if(groupBean1.getGroupName().equals(record.getBtitdCode()) || groupBean1.getGroupName().equals(record.getBtitdCode() + "_member")
                        || groupBean1.getGroupName().equals(record.getBtitdCode() + "_clerk")){
                    ids.add(groupBean1.getGroupName());
                }
            }
            if(null == ids){
                return ResponseModel.fail("select face of group list is null！",-1);
            }
            Object[] objects = ids.toArray();
            HashMap<String, Object> hashMap1 = new HashMap<>();
            hashMap1.put("description","smartstore-operation");
            hashMap1.put("groupNames",objects);
            hashMap1.put("name",record.getBtitdCode());
            hashMap1.put("personId",personId);
            //  2.2 创建用户（保存用户和组的关系）
            ResponseModel responseResult6 = restTemplate.postForObject(FACE_SERVER + "/rest/cv/face/persons",
                    hashMap1, ResponseModel.class);
            if(responseResult6.getStatus() != 0){
                return ResponseModel.fail("insert user error！",-1);
            }
            // 3.上传头像
            List<String> base64Datas = new ArrayList<>();
            base64Datas.add("");
            ResponseModel responseResult4 = restTemplate.postForObject(FACE_SERVER + "/rest/cv/face/persons/"+personId+"/images",
                    base64Datas, ResponseModel.class);
            if(responseResult4.getStatus() != 0){
                return ResponseModel.fail("upload user image error！",-1);
            }
        }catch (Exception e){
            logger.error(e.toString());
        }
        return ResponseModel.ok("success");
    }

	/**
	 * @about  department detail
	 * @param id
	 * @return
	 */
    @Override
    //@Cacheable(cacheNames = "department", key = "#id")
    public Department selectDepartmentById(Integer id) {
        Department department = departmentMapper.selectByPrimaryKey(id);
        int edgeDeviceNum = 0;
        int endDeviceNum = 0;
        int normalDeviceNum = 0;
        int offNormalDeviceNum = 0;
        if (null != department) {
            List<DepartmentDevice> departmentDevices = selectDepartmentDeviceBydepartmentId(department.getId());
            if(null != departmentDevices && departmentDevices.size() > 0){
                for(DepartmentDevice departmentDevice : departmentDevices){
                    if(CommonParams.EDGE_TYPE_END.equals(departmentDevice.geteType())){
                        endDeviceNum++;
                    }else{
                        edgeDeviceNum++;
                    }
                    if(departmentDevice.getStatus() == 0){
                        normalDeviceNum++;
                    }else{
                        offNormalDeviceNum++;
                    }
                }
            }
            department.setEdgeDeviceNum(edgeDeviceNum);
            department.setEndDeviceNum(endDeviceNum);
            department.setDepartmentDeviceList(departmentDevices);
            department.setDepartmentDeviceTopologyList(selectAllDepartmentTopologyByDepartmentId(department.getId()));
            // 门店是否配置配置单/完成拓扑图构建
            setDepartmentIsConfig(department,departmentDevices);
            department.setOffNormalDeviceNum(offNormalDeviceNum);
            department.setNormalDeviceNum(normalDeviceNum);
            department.setDepartmentDeviceTypeNum(2);
            department.setDepartmentAllDeviceNum(offNormalDeviceNum + normalDeviceNum);
        }

        return department;
    }



    /**
     * @about  department detail
     * @param departmentCode
     * @param type
     * @return
     */
    @Override
    //@Cacheable(cacheNames = "department", key = "#id")
    public Department selectByBtitDepartmentCode(String departmentCode,String type) {
        Department  department = departmentMapper.selectByBtitDepartmentCode(departmentCode);
        List<DepartmentDevice> departmentDevicesResult = new ArrayList<>();
        if (null != department) {
            List<DepartmentDevice> departmentDevices = selectDepartmentDeviceBydepartmentId(department.getId());
            if(null != departmentDevices && departmentDevices.size() > 0){
                for(DepartmentDevice departmentDevice : departmentDevices){
                    if(departmentDevice.geteType().equals(type)){
                        departmentDevicesResult.add(departmentDevice);
                    }
                }
            }
            department.setDepartmentDeviceList(departmentDevicesResult);
            department.setDepartmentDeviceTopologyList(selectAllDepartmentTopologyByDepartmentId(department.getId()));
            // 门店是否配置配置单/完成拓扑图构建
            setDepartmentIsConfig(department,departmentDevices);
        }

        return department;
    }

    /**
     * @param pageRequest
     * @param tenant
     * @param shopCode
     * @return 设备列表 for btit code
     */
    @Override
    public PageResult<DepartmentDeviceForBtit> getDeviceListForPage(PageRequest pageRequest, Integer tenant,String shopCode, String status, String type) {
        int pageNum = pageRequest.getPageNum();
        int pageSize = pageRequest.getPageSize();
        PageHelper.startPage(pageNum, pageSize);
        List<DepartmentDeviceForBtit> sysMenus = getAllDeviceListForPage(tenant, shopCode, status, type);
        return PageUtils.getPageResult(pageRequest, new PageInfo<DepartmentDeviceForBtit>(sysMenus));
    }

    @Override
    public List<CameraInstallStatusVo> getAllCameraInstallStatus(Integer departmentId) {
        return deviceMapper.getAllCameraInstallStatus(departmentId);
    }

    /**
     * @param deviceId
     * @param imageId
     * @return 修改安装状态
     */
    @Override
    public ResponseModel updateCameraInstallStatus(Integer deviceId, String imageId,Integer status) {
        // 1.查询最新安装图片的id,如相同说明可操作
        DepartmentDevice departmentDevice = deviceMapper.selectByPrimaryKey(deviceId);

        if(null != departmentDevice){
            if(imageId.equals(departmentDevice.getInstallTheImageId())){
               deviceMapper.updateCameraInstallStatus(deviceId, status);
            }else{
                return ResponseModel.fail(CommonParams.INSTALL_IMAGE_STATUS,1);
            }
        }
       return ResponseModel.ok(status);
    }

    //判断Object 的类型(map,set,list,array),并返回长度
    public static int getLength(Object obj) {
        if (obj == null) {
            return 0;
        }
        if (obj.getClass().isArray()){
            int length = Array.getLength(obj);
            return length;
        }if (obj instanceof List) {
            return ((List) obj).size();
        }if (obj instanceof Set) {
            return ((Set) obj).size();
        }if (obj instanceof Map) {
            return ((Map) obj).size();
        }
        return 0;
    }
    /**
     * @param departmentId
     * @return 获取门店摄像头分布情况
     */
    @Override
    public EquipmentDeploymentDetails getAllDeviceDistribution(Integer departmentId) {
        EquipmentDeploymentDetails deploymentDetails = new EquipmentDeploymentDetails();
        deploymentDetails.setDepartmentId(departmentId);

        List<CameraInstallVo> cameraInstallVoList = new ArrayList<>();
        List<CameraDetailVo> cameraDetailVos = new ArrayList<>();
        List<CameraDetailForLandMarksVo> cameraDetailForLandMarks = new ArrayList<>();


        // 1.获取门店部署文件 - 摄像头安装图片 - 画线数据
        selectLineList(departmentId,cameraInstallVoList);
        // 2.获取最新门店设备部署文件
        List<HardwareDeploymentFile> deploymentFile = deviceMapper.getDeploymentFile(departmentId);
        String urlFile = "";
        if(null != deploymentFile && deploymentFile.size() > 0){
            urlFile = deploymentFile.get(0).getDeploymentFilePath();
        }
        try {
            String fileContent = ParseCompressedFile.readData(urlFile, CommonParams.DOWNLOAD_INSTALL_FILE);
           // logger.info("Device Deployment File Url is {} , Content is {} ",urlFile,fileContent);
            if(StringUtils.isNotBlank(fileContent)){
                Map<String,String> jsonObject = JSON.parseObject(fileContent , Map.class);
                Object cameras = jsonObject.get("Cameras"); // 摄像头
                Object landMarks = jsonObject.get("LandMarks"); // 地标

                cameraDetailVos = JSONArray.parseArray(cameras.toString(), CameraDetailVo.class);
                cameraDetailForLandMarks = JSONArray.parseArray(landMarks.toString(), CameraDetailForLandMarksVo.class);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        deploymentDetails.setCameraDetailVoList(cameraDetailVos);
        deploymentDetails.setCameraDetailForLandMarksVoList(cameraDetailForLandMarks);
        deploymentDetails.setCameraInstallImage(cameraInstallVoList);
        return deploymentDetails;
    }

    /*public static void main (String[] args) throws IOException {
        String fileContent = ParseCompressedFile.readData("https://dev-api.brain.lenovo.com/file/static/fad229bc9486441f82b825d409016ee5", "smartstore/config.yaml");
        System.out.println(fileContent+"=============");
    }*/
    /**
     * @param departmentId
     * @param cameraInstallVoList
     * @about 获取划线数据
     */
    public void selectLineList(Integer departmentId,  List<CameraInstallVo> cameraInstallVoList){
        // 1.获取门店的安装校对图
        List<DepartmentDeviceForBtit> departmentDeviceList = deviceMapper.selectDeviceByDepartmentId(departmentId, CommonParams.EDGE_TYPE_END);
        // 2.获取门店部署文件 - 摄像头安装图片 - 画线数据
        HashMap<String, Object> hashMap2 = selectDepartmentInstallFile(departmentId,null);
        // 删除下载包
        System.gc();
        CompressionFile.delFolder(CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE);
        if(null != departmentDeviceList && departmentDeviceList.size() > 0){
            for(DepartmentDeviceForBtit departmentDevice : departmentDeviceList){
                CameraInstallVo cameraInstallVo = new CameraInstallVo();
                cameraInstallVo.setCameraID(departmentDevice.getId());
                cameraInstallVo.setCoverageAreaImage(departmentDevice.getCoverageAreaImage());
                cameraInstallVo.setInstallTheImage(departmentDevice.getInstallTheImage());
                cameraInstallVo.setInstallStatus(departmentDevice.getInstallStatus());
                cameraInstallVo.setInstallTheImageId(departmentDevice.getInstallTheImageId());
                // 获取摄像头画图线数据
               /* if(null != hashMap2.get(departmentDevice.getId().toString())){
                    HashMap<String, Object> oldValue = JSONObject.parseObject(hashMap2.get(departmentDevice.getId().toString()).toString(), HashMap.class);
                    if(null != oldValue.get("lineList")){
                        List<CameraCoordinates> lineList = JSONArray.parseArray(oldValue.get("lineList").toString(), CameraCoordinates.class);
                        cameraInstallVo.setLineList(lineList);
                    }
                }*/
                // 获取摄像头画图线数据  TODO 以前是media.json 现在是paintermap.json
                if(null != hashMap2.get(CommonParams.ENTER_OR_PASSING_LINES)){
                    HashMap<String, Object> oldValue = JSONObject.parseObject(hashMap2.get(CommonParams.ENTER_OR_PASSING_LINES).toString(), HashMap.class);
                    if(!oldValue.keySet().isEmpty()&& oldValue.containsKey(departmentDevice.getId().toString())){
                        List<CameraCoordinates> lineList = JSONArray.parseArray(oldValue.get(departmentDevice.getId().toString()).toString(), CameraCoordinates.class);
                        cameraInstallVo.setLineList(lineList);
                    }
                }
                cameraInstallVoList.add(cameraInstallVo);
            }
        }
    }
    /**
     * @param departmentId
     * @return 获取部署文件的数据 --画线数据
     */
    public HashMap<String, Object> selectDepartmentInstallFile(Integer departmentId,String filePath){
        long randomNum = System.currentTimeMillis();
        HashMap<String, Object> hashMap2 = new HashMap<>();

        // 1.获取门店部署文件 - 摄像头安装图片 - 画线数据
        String filePathResult = "";
        if(null != filePath && !"".equals(filePath)){
            filePathResult = filePath;
        }else{
            List<HardwareDeploymentFile> deploymentFileList = deviceMapper.getDeploymentFile(departmentId);
            if(null != deploymentFileList && deploymentFileList.size() > 0){
                filePathResult = deploymentFileList.get(0).getDeploymentFilePath();
            }
        }
        logger.info("getImageFromURL filePath is {},",filePathResult);
        if(StringUtils.isNotBlank(filePathResult)){
            // 2.下载并解压
            byte[] imageFromURL = CompressionFile.getImageFromURL(filePathResult);
            File file = CompressionFile.getFileByBytes(imageFromURL,
                    CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE, randomNum+CommonParams.INSTALL_DEPLOYMENT_FILE_TEST);
            // 3.解析并追加
            if(null != file) {
                try {
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    FileVo fileVo = CompressionFile.UnZipFolder(file.getAbsolutePath(),
                            CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE + File.separator);
                    if (null != fileVo) {
                        logger.info(" media.json is {}", fileVo.getWrite());
                        String replace = fileVo.getWrite().replace("}\n" +
                                "{", ",");
                        hashMap2 = JSONObject.parseObject(replace, HashMap.class);
                    }
                }catch(Exception e){
                    logger.info("have an Exception for Read camera data");
                }
            }
        }

        return hashMap2;
    }
    /**
     * @param code
     * @return 服务端获取设备类型
     */
    @Override
    public List<DepartmentDeviceForUseType> selectCameraDepartmentByCode(String code) {
        List<DepartmentDeviceForUseType> deviceForType = new ArrayList<>();
        Department department = deviceMapper.selectCameraDepartmentByCode(code);
        if(department != null){
            List<DepartmentDeviceForUseType> deviceForUseTypes = deviceMapper.selectCameraDepartmentById(department.getId());
            for(DepartmentDeviceForUseType deviceForUseType : deviceForUseTypes){
                if(null == deviceForUseType.getUseType()){
                    continue;
                }
                deviceForType.add(deviceForUseType);
            }
        }
        return deviceForType;
    }

    /**
     * @param id
     * @return 服务端获取设备类型
     */
    @Override
    public List<DepartmentDeviceForUseType> selectCameraDepartmentById(Integer id) {
        List<DepartmentDeviceForUseType> deviceForType = new ArrayList<>();
        List<DepartmentDeviceForUseType> deviceForUseTypes = deviceMapper.selectCameraDepartmentById(id);
        for(DepartmentDeviceForUseType deviceForUseType : deviceForUseTypes){
            if(null == deviceForUseType.getUseType()){
                continue;
            }
            deviceForType.add(deviceForUseType);
        }
        return deviceForType;
    }

    /**
     * @param departmentId
     * @param departmentDeviceForUseType
     * @return  更新摄像头的用途类型
     */
    @Override
    public ResponseModel updateDeviceUseType(Integer departmentId,List<DepartmentDeviceForUseType> departmentDeviceForUseType) {
        int result = 0;
        if(null != departmentDeviceForUseType && departmentDeviceForUseType.size() > 0){
            result =  deviceMapper.updateDeviceUseType(departmentDeviceForUseType);
        }
       return ResponseModel.ok(result);
    }

    /**
     * @param deviceId
     * @return 删除摄像头
     */
    @Override
    public ResponseModel deleteDeviceForCamera(Integer deviceId) {
        int i = deviceMapper.deleteByDeviceId(deviceId);
        return ResponseModel.ok(i);
    }

    /**
     * @param departmentId
     * @param cameraCoordinates
     * @return 上传门店摄像头部署坐标箭头指示
     */
    @Override
    public ResponseModel uploadDeviceForCameraCoordinates(Integer departmentId, CameraCoordinatesTwo cameraCoordinates,Integer deviceId) {
        ResponseModel responseModel = new ResponseModel();
        // 1.摄像头显示箭头的数据
        JSONObject jsonAll = new JSONObject();

        // 2.获取门店最新部署文件
        List<HardwareDeploymentFile> deploymentFile = deviceMapper.getDeploymentFile(departmentId);
        long randomNum = System.currentTimeMillis();
        if(null != deploymentFile && deploymentFile.size() > 0){
            String urlFile = deploymentFile.get(0).getDeploymentFilePath();
            String urlFileName = deploymentFile.get(0).getDeploymentFileName();
            String[] split = urlFileName.split("\\.");
            urlFileName = split[0];
            if(StringUtils.isNotBlank(urlFile)){
                // 3.下载并解压
                byte[] imageFromURL = CompressionFile.getImageFromURL(urlFile);
                File file = CompressionFile.getFileByBytes(imageFromURL, CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE, randomNum+CommonParams.INSTALL_DEPLOYMENT_FILE_TEST);
                // 4.解析并追加
                if(null != file) {
                    try {
                        if (!file.exists()) {
                            file.createNewFile();
                        }
                        FileVo fileVo = CompressionFile.UnZipFolder(file.getAbsolutePath(), CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE + urlFileName + File.separator);
                        if (null != fileVo) {
                            logger.info("add  before  ...  media.json is {}", fileVo.getWrite());
                            HashMap<String, Object> hashMap2 = JSONObject.parseObject(fileVo.getWrite(), HashMap.class);

                            // 写入摄像头画图线数据
                            if(null != hashMap2.get(deviceId.toString())){
                                logger.info("Write the configuration file for the first time , deviceId is {} ", deviceId);
                                HashMap<String, Object> oldValue = JSONObject.parseObject(hashMap2.get(deviceId.toString()).toString(), HashMap.class);
                                // 加入线的方向
                                setLineDirection(cameraCoordinates.getLineList());
                                oldValue.put("lineList",cameraCoordinates.getLineList());
                                hashMap2.put(deviceId.toString(),oldValue);
                            }
                            jsonAll.putAll(hashMap2);
                            logger.info("add after ... media.json is {}", jsonAll);
                            FileWriter fileWriter = new FileWriter(fileVo.getFile().getParent() + CommonParams.INSTALL_DEPLOYMENT_FILE_MEDIA, false);
                            fileWriter.write(jsonAll.toJSONString());
                            fileWriter.flush();
                            fileWriter.close();
                            // 5. 重新压缩
                            File fileResult = CompressionFile.ZipFolder(fileVo.getFile().getParent(), fileVo.getFile().getParent() + CommonParams.FILE_TYPE_ZIP);
                            // 6. 更新上传
                            if(fileResult.exists()){
                                logger.info("file exist !!!!!! file path is {} " ,fileResult.getPath());
                                String path = fileResult.getPath() + CommonParams.FILE_TYPE_ZIP;
                                File file1 = new File(path);
                                FileInputStream fileInputStream = new FileInputStream(file1);
                                MultipartFile multipartFile = new MockMultipartFile(file1.getName(), file1.getName(),
                                        ContentType.APPLICATION_OCTET_STREAM.toString(), fileInputStream);
                                fileInputStream.close();
                                responseModel = resourceServiceImpl.updateHardwareConfigFile(departmentId,multipartFile,"install");
                            }
                        }
                        // 删除下载压缩包
                        System.gc();
                        CompressionFile.delFolder(CommonParams.INSTALL_DEPLOYMENT_FILE_COMPRESSIONFILE);
                    } catch (Exception e) {
                        logger.info(" have an exception , Failed to parse the uploaded file");
                    }
                }
            }
        }

        return responseModel;
    }

    /**
     * @param lineList
     * @return 设置路过进店线左右
     */
    public void setLineDirection(List<CameraCoordinates> lineList){

        List<CameraCoordinates> lineListNew = new ArrayList<>();
        for(CameraCoordinates cameraCoordinates : lineList){
            if(cameraCoordinates.getLineType()== 0){
                cameraCoordinates.setDirection(CommonParams.LINE_TYPE_DIRECTION_ENTER);
            }else{
                lineListNew.add(cameraCoordinates);
            }
        }
        // 路过线设置左右
        if(lineListNew.size() > 1){
            lineListNew.sort(Comparator.comparing(CameraCoordinates::getStartX).thenComparing(CameraCoordinates::getEndX));
            lineListNew.get(0).setDirection(CommonParams.LINE_TYPE_DIRECTION_LEFT);
            lineListNew.get(1).setDirection(CommonParams.LINE_TYPE_DIRECTION_RIGHT);
        }else{
            lineListNew.get(0).setDirection(CommonParams.LINE_TYPE_DIRECTION_LEFT);
        }
    }
    public List<DepartmentDeviceForBtit> getAllDeviceListForPage(Integer tenant,String shopCode, String status, String type) {
        List<DepartmentDeviceForBtit> allDeviceListForPage = deviceMapper.getAllDeviceListForPage(tenant, shopCode, status, type);
        Integer departmentId = null;
        String edgeServerIP = "";
        if(null != allDeviceListForPage && allDeviceListForPage.size() > 0){
            for(DepartmentDeviceForBtit departmentDevice : allDeviceListForPage){
                String jsonConfig = departmentDevice.getJsonConfig();
                if(null != jsonConfig && !"".equals(jsonConfig)){
                    HashMap<String,String> hashMap = JSONObject.parseObject(jsonConfig, HashMap.class);
                    departmentDevice.setIp(hashMap.get("ip"));
                }
               // 查找edgeServer ip
                if(type.equals("end")){
                    departmentId = departmentDevice.getdId();
                    DepartmentDevice edgeServer = deviceMapper.selectEdgeServerByDepartmentId(departmentId,departmentDevice.getId());
                    if(null != edgeServer){
                        String edgeJsonConfig = edgeServer.getJsonConfig();
                        if(null != edgeJsonConfig && !"".equals(edgeJsonConfig)){
                            HashMap<String,String> hashMap = JSONObject.parseObject(edgeJsonConfig, HashMap.class);
                            edgeServerIP = hashMap.get("ip");
                        }
                        departmentDevice.setEdgeServerId(edgeServer.getId());
                        departmentDevice.setEdgeServerCode(edgeServer.getServerCode());
                    }
                    departmentDevice.setEdgeServerIP(edgeServerIP);
                }
            }
        }
        return allDeviceListForPage;
    }

    @Override
	//@Cacheable(cacheNames = "department", key = "#dcode")
	public Department selectDepartmentByCode(String dcode) {
		Department department = departmentMapper.selectByDcode(dcode);
		if (department != null) {
            department.setDepartmentDeviceList(selectDepartmentDeviceBydepartmentId(department.getId()));
			department.setDepartmentDeviceTopologys(selectDepartmentDeviceTopologyById(department.getId()));
		}

		return department;
	}

	@Override
	//@Cacheable(cacheNames = "allDepartment")
	public List<Department> selectAllDepartment(String name, String dCode) {
        List<Department> departments = departmentMapper.selectAll(name, dCode);
        if(null != departments && departments.size() > 0){
            for(Department department : departments){
                List<DepartmentDevice> departmentDevices = selectDepartmentDeviceBydepartmentId(department.getId());
                department.setDepartmentDeviceList(departmentDevices);
               // department.setDepartmentDeviceTopologyList(selectAllDepartmentTopologyByDepartmentId(department.getId()));
                // 门店是否配置配置单/完成拓扑图构建
                setDepartmentIsConfig(department,departmentDevices);
            }
        }
		return departments;
	}

    /**
     * @param department
     * @param departmentDevices
     * @return 门店是否配置配置单/完成拓扑图构建
     */
	public Department setDepartmentIsConfig(Department department, List<DepartmentDevice> departmentDevices){
        //是否配置过设备
        List<Integer> eIds = new ArrayList<>();
        List<Integer> tIds = new ArrayList<>();
        department.setIsConfig(0);
        // 是否完成构建拓扑图
        department.setIsCompleteTopology(0);
        if(null != departmentDevices && departmentDevices.size() > 0){
            department.setIsConfig(1);
            for(DepartmentDevice departmentDevice :departmentDevices){
                eIds.add(departmentDevice.getId());
            }
            List<DepartmentDeviceTopology> departmentDeviceTopologys = topologyMapper.selectTopologyBydId(department.getId());
           if(null != departmentDeviceTopologys && departmentDeviceTopologys.size() > 0){
               for(DepartmentDeviceTopology deviceTopology :departmentDeviceTopologys){
                   tIds.add(deviceTopology.getFromDeviceId());
                   tIds.add(deviceTopology.getToDeviceId());
               }
               if(tIds.size() > 0 && null != tIds && tIds.size() > eIds.size() && departmentDeviceTopologys.size() >= eIds.size()){
                   List<Integer> integers = diffList(eIds, tIds);
                   if(tIds.contains(-1) && integers.size() >= 1){
                       department.setIsCompleteTopology(1);
                   }
               }
           }
        }
        return department;
    }

	@Override
	//@CachePut(cacheNames = "department", key = "#record.id")
	public int updateDepartmentById(Department record) {
		return departmentMapper.updateByPrimaryKey(record);
	}

	@Override
	/*@Caching(evict = { @CacheEvict(cacheNames = "departmentDevice", key = "#id"),
			@CacheEvict(cacheNames = "allDepartmentDevice", allEntries = true) })*/
	public int deleteDepartmentDevice(Integer id) {
		return deviceMapper.deleteByPrimaryKey(id);
	}

	@Override
	//@CacheEvict(cacheNames = "allDepartmentDevice", allEntries = true)
	@Transactional(rollbackFor = Exception.class)
	public int insertDepartmentDevice(List<AddDepartmentDevice> record, Integer dId, String type) {
        int insert = 0 ;
        List<DepartmentDevice> addList = new ArrayList<>();
        List<Integer> newEids = new ArrayList<>();
        List<Integer> addEids = new ArrayList<>();
        List<Integer> intRecord = new ArrayList<>();
        List<Integer> integers = new ArrayList<>();
        List<Integer> oldIds = new ArrayList<>();
        List<Integer> ids = new ArrayList<>();
        List<Integer> idsList = new ArrayList<>();
        if(null != record && record.size() > 0){
            // 1.0 id 为空 新配置单
            for(AddDepartmentDevice addDepartmentDevice : record){
                if(null == addDepartmentDevice.getId() || "".equals(addDepartmentDevice.getId())){
                    addEids.add(addDepartmentDevice.geteId());
                }else{
                    newEids.add(addDepartmentDevice.geteId());
                    ids.add(addDepartmentDevice.getId());
                }
            }
        	//  区别从拓扑图还是店铺添加配置单
            if(CommonParams.ADD_EDGE_DEVICE_TYPE.equals(type)){
                // 1.1查询原来的配置单
                List<DepartmentDevice> deviceList = deviceMapper.selectByDepartmentId(dId);

                //1.2 做对比（多出来的删除）
                if(null != deviceList && deviceList.size() > 0){
                    for(DepartmentDevice departmentDevice : deviceList){
                        intRecord.add(departmentDevice.geteId());
                        oldIds.add(departmentDevice.getId());
                    }
                    //1.3 新list 和旧list 做对比 那个size大循环哪个<删除多余配置单>
                    if(intRecord.size() > newEids.size()){
                        integers = diffList(newEids, intRecord);
                    }else{
                        integers = diffList(intRecord,newEids);
                    }
                    // 1.3.2 若相同配置单 则看id
                    if(newEids.size() != intRecord.size() && integers.size() == 0){
                        idsList = diffList(ids,oldIds);
                    }
                    if(null != integers && integers.size() > 0){
                        deviceMapper.deleteByPrimaryKeys(integers,dId);
                    }
                    if(null != idsList && idsList.size() > 0){
                        deviceMapper.deleteByIds(idsList);
                    }
                }
        	}
            // 2. 重新新增配置单
            List<EdgeDevice> edgeDeviceList = new ArrayList<>();
            if(null != addEids && addEids.size() > 0){
                for(Integer eId : addEids){
                    EdgeDevice edgeDevice = edgeDeviceMapper.selectByPrimaryKey(eId);
                    edgeDeviceList.add(edgeDevice);
                }
                //	List<EdgeDevice> edgeDeviceList = edgeDeviceMapper.selectAllByPrimaryKey(edges);
                List<DepartmentDevice> departmentDevices = deviceMapper.selectBydId(dId);
                if(null != edgeDeviceList && edgeDeviceList.size() > 0){
                    int index = 0;
                    for (EdgeDevice edgeDevice : edgeDeviceList) {
                        int serverId = 0;
                     //   serverId = (null != departmentDevices && departmentDevices.size() > 0) ? edgeDevice.getTypeId() + departmentDevices.size():edgeDevice.getTypeId();
                        DepartmentDevice newRecord = new DepartmentDevice();
                        newRecord.setdId(dId);
                        newRecord.seteId(edgeDevice.getId());
                        newRecord.setConfigName(edgeDevice.getName());
                       // int num = theSameNumber(addList,newRecord);
                        // serverId = num > 0 ? num + serverId : serverId;
                        serverId = departmentDevices.size() > 0 ? departmentDevices.size() + 1 + index : index + 1;

                        newRecord.setServerName(serverId + "_" + edgeDevice.getName());
                        newRecord.insertGenerator();
                        // 设备状态： 默认未激活
                        newRecord.setStatus(2);
                        addList.add(newRecord);
                        index++;
                    }
                }
                insert = deviceMapper.insertList(addList);
                departmentMapper.updateDepertment(dId);
            }
        }else{
            insert =  deviceMapper.deleteByPrimaryKey(dId);
        }
		return insert;
	}

	public int theSameNumber(List<DepartmentDevice> addList, DepartmentDevice newRecord){
        Map<Integer,Integer> map = new HashMap<>();
        for (DepartmentDevice i : addList) {
            if(map.containsKey(i.geteId())) {
                map.put(i.geteId(), map.get(i.geteId()).intValue()+1);
            }else {
                map.put(i.geteId(), new Integer(1));
            }
        }
        Iterator<Integer> iter = map.keySet().iterator();
        while(iter.hasNext()) {
            Integer key = iter.next();
            if(key.equals(newRecord.geteId())){
                return map.get(key);
            }
            //map.get(key) 数量
        }
        return 0;
    }
    /**
     * @param i small
     * @param j big
     * @return different
     */
    public List<Integer> diffList(List<Integer> i, List<Integer> j){
        List<Integer> newInteger = new ArrayList<>();
        for (int k = 0; k < j.size() ; k++) {
            if(i.contains(j.get(k))){
                continue;
            }else{
                newInteger.add(j.get(k));
            }
        }
        return newInteger;
    }
	@Override
	//@Cacheable(cacheNames = "departmentDevice", key = "#id")
	public DepartmentDevice selectDepartmentDeviceById(Integer id) {
		DepartmentDevice departmentDevice = deviceMapper.selectByPrimaryKey(id);
		if (departmentDevice != null) {
			departmentDevice.setEdgeDevice(edgeDeviceService.selectEdgeDeviceById(departmentDevice.getdId()));
		}
		return departmentDevice;
	}

	@Override
	//@Cacheable(cacheNames = "allDepartmentDevice", key = "#departmentId")
	public List<DepartmentDevice> selectDepartmentDeviceBydepartmentId(Integer departmentId) {
		List<DepartmentDevice> list = deviceMapper.getDepartmentEdgeDevicedetail(departmentId);
		List<Integer> eIds = new ArrayList<>();
		List<Integer> topoIds = new ArrayList<>();
		if(null != list && list.size() > 0){
			for (DepartmentDevice departmentDevice : list) {
				eIds.add(departmentDevice.geteId());
            }
			List<EdgeDevice> edgeDeviceList = edgeDeviceService.selectAllEdgeDeviceById(eIds);
            // 是否被拖拽
            List<DepartmentDeviceTopology> deviceTopology = topologyMapper.selectDepartmentDeviceTopology(departmentId);
            if(null != deviceTopology && deviceTopology.size() > 0){
                String data = deviceTopology.get(0).getData();
                DepartmentDeviceTopologyParam departmentDeviceTopologyParam = JSON.parseObject(data, DepartmentDeviceTopologyParam.class);
                List<NodeData> nodeDataArray = departmentDeviceTopologyParam.getNodeDataArray();
                for(NodeData nodeData : nodeDataArray){
                    if(nodeData.getType().equals(CommonParams.DEPARTMENT)){
                        continue;
                    }else{
                        topoIds.add(nodeData.getId());
                    }
                }
            }

			if(null != edgeDeviceList && edgeDeviceList.size() > 0){
				for (DepartmentDevice departmentDevice : list) {
				    List<String> params = new ArrayList<>();
                    // 重新组装
                    HashMap<String, List<String>> allParam = new HashMap<>();
					for(EdgeDevice edgeDevice : edgeDeviceList){
						if(departmentDevice.geteId().equals(edgeDevice.getId())){
						    // 拼接设备的所有配置参数
                            allParam.putAll(edgeDevice.getAllParam());  // 软件硬件的参数
                            departmentDevice.setEdgeDevice(edgeDevice);
						}
					}
					params.add(departmentDevice.getJsonConfig());
                    allParam.put(CommonParams.DEPARTMENT_DEVICE ,params); // 设备额外添加的参数
                    departmentDevice.setAllParam(allParam);
                    departmentDevice.setIsDrag(0);
                    if(null != topoIds && topoIds.size() > 0){
                        for (int i = 0; i < topoIds.size(); i++) {
                            if(topoIds.get(i).equals(departmentDevice.getId())){
                                departmentDevice.setIsDrag(1);
                            }
                        }
                    }
				}
			}
		}
		return list;
	}

	@Override
	//@Cacheable(cacheNames = "allDepartmentDevice")
	public List<DepartmentDevice> selectAllDepartmentDevice() {
		List<DepartmentDevice> list = deviceMapper.selectAll();
		for (DepartmentDevice departmentDevice : list) {
			departmentDevice.setEdgeDevice(edgeDeviceService.selectEdgeDeviceById(departmentDevice.getdId()));
		}
		return list;
	}

	@Override
	//@CachePut(cacheNames = "departmentDevice", key = "#record.id")
	public int updateDepartmentDeviceById(DepartmentDevice record) {
        return deviceMapper.updateByPrimaryKey(record);
	}

	@Override
	/*@Caching(evict = { @CacheEvict(cacheNames = "DeviceTopology", key = "#id"),
			@CacheEvict(cacheNames = "allDeviceTopology", allEntries = true) })*/
	public int deleteDepartmentDeviceTopologyById(Integer id) {
		return topologyMapper.deleteByPrimaryKey(id);
	}

	/**
	 * @about save DepartmentDeviceTopology
	 * @param record
	 * @return
	 */
	@Override
	//@CacheEvict(cacheNames = "allDeviceTopology", allEntries = true)
	@Transactional(rollbackFor = Exception.class)
	public ResponseModel insertDepartmentDeviceTopology(DepartmentDeviceTopology record) {
        int insert = 0;
       //1.转换json字符串为对象
        DepartmentDeviceTopologyParam departmentDeviceTopologyParam = JSON.parseObject(record.getJsonParam(), DepartmentDeviceTopologyParam.class);
        record.setData(record.getJsonParam());
        // 2.判断是新增还是修改
        List<DepartmentDeviceTopology> topology = topologyMapper.selectByPrimaryKey(record.getdId());
        if(null != topology && topology.size() > 0){
            topologyMapper.deleteByPrimaryKey(record.getdId());
        }
        // 3.保存关系
        List<NodeData> nodeDataArray = departmentDeviceTopologyParam.getNodeDataArray();
        List<LinkData> linkDataArray = departmentDeviceTopologyParam.getLinkDataArray();
		List<DepartmentDeviceTopology> newRecordList = new ArrayList<>();
		List<DepartmentDevice> newDepartmentDeviceList = new ArrayList<>();

        if(null != linkDataArray && linkDataArray.size() > 0){
            for (LinkData linkData : linkDataArray){
				DepartmentDeviceTopology newRecord = new DepartmentDeviceTopology();
				newRecord.setFromDeviceId(linkData.getFrom());
				newRecord.setToDeviceId(linkData.getTo());
				newRecord.setdId(record.getdId());
				newRecord.setData(record.getData());
				newRecordList.add(newRecord);
            }
        }else{
            DepartmentDeviceTopology newRecord = new DepartmentDeviceTopology();
            newRecord.setdId(record.getdId());
            newRecord.setData(record.getData());
            newRecordList.add(newRecord);
        }

        List<CameraCoordinates> cameraLineList = new ArrayList<>();
        List<Integer> cameraForHeatingPower = new ArrayList<>();
        List<ControlServerCamList> camLists = new ArrayList<>();
        List<ControlServerCamera> controlServerHeartCameras = new ArrayList<>();
        // 进店摄像头  id:视频流地址
        HashMap<String, Object> inStoreDevice = new HashMap<>();
        Integer eId = 0; // tx2的id

        if(null != nodeDataArray && nodeDataArray.size() > 0){
            for (NodeData nodeData : nodeDataArray){
                // 4. 修改设备详情
                if(!CommonParams.DEPARTMENT.equals(nodeData.getType())){
                    DepartmentDevice device =new DepartmentDevice();
                    device.setId(nodeData.getId());
                    device.setServerName(nodeData.getName());
                    device.setParam(nodeData.getParameter());
                    device.setDescription(nodeData.getDescription());
                    device.setJsonConfig(nodeData.getJsonConfig());
                  //  device.setUseType(nodeData.getUseType());
					newDepartmentDeviceList.add(device);
                }
                // 5.1 组装数据
               // addData(eId, nodeData, cameraLineList, inStoreDevice, cameraForHeatingPower, camLists, controlServerHeartCameras);
            }

            /* // 5.2 向controlServer发送配置信息
            ResponseModel responseModel = sendControlServerConfig(record, cameraForHeatingPower, eId, camLists, cameraLineList, inStoreDevice, controlServerHeartCameras);
            if(responseModel.getStatus() != 0){
                logger.info("controlServer update config is defeated , message is {} page is 870" ,responseModel.getMessage());
                return responseModel;
            }
            // 6.更新部署文件
            CameraCoordinatesTwo cameraCoordinates = new CameraCoordinatesTwo();
            cameraCoordinates.setLineList(cameraLineList);
            Object inStoreDeviceId = inStoreDevice.get("inStoreDeviceId");
            ResponseModel model = uploadDeviceForCameraCoordinates(record.getdId(), cameraCoordinates, (Integer) inStoreDeviceId);
            if(model.getStatus() != 0){
                logger.info("update cameraConfig is defeated , message is {} page is 879" ,model.getMessage());
                return model;
            }*/
            // 7. 更改属性
            if(null != newDepartmentDeviceList && newDepartmentDeviceList.size() > 0){
				deviceMapper.updateListByPrimaryKey(newDepartmentDeviceList);
				departmentMapper.updateDepertment(record.getdId());
			}
        }
        // 8. 更改topo图
        if(newRecordList.size() > 0){
            insert = topologyMapper.insertDepartmentDeviceTopologyList(newRecordList);
        }
        Set<Integer> fromIds = new HashSet<>();
        // 9. 记录门店使用的模型包
        for(DepartmentDeviceTopology departmentDeviceTopology :newRecordList){
            if(departmentDeviceTopology.getFromDeviceId() > 0){
                if(!fromIds.contains(departmentDeviceTopology.getFromDeviceId())){
                    fromIds.add(departmentDeviceTopology.getFromDeviceId());
                }
            }
            if(departmentDeviceTopology.getFromDeviceId() == -1){
                if(!fromIds.contains(departmentDeviceTopology.getToDeviceId())){
                    fromIds.add(departmentDeviceTopology.getToDeviceId());
                }
            }
        }

        HashMap<String, Object> hashMap = new HashMap<>();
        List<SoftwareConfig> softwareConfigs = new ArrayList<>();
        // 查找使用的模型包
        List<Software> softwareList = softwareMapper.selectEdgeServerDetail(record.getdId(),null);

        for(Software software :softwareList){
            for(Integer id :fromIds){
                if(software.getEdgeServerId().equals(id)){
                    SoftwareConfig softwareConfig = new SoftwareConfig();
                    String stopScript = "#!/bin/bash\n" +
                            "\n" +
                            "pid=`ps -ef |grep %s |grep -v 'grep'| awk '{ print $2 }'`;\n" +
                            "\n" +
                            "if [  -n  \"$pid\"  ];  then\n" +
                            "   echo pid=$pid\n" +
                            "   kill  -9  $pid;\n" +
                            "fi";
                    softwareConfig.setStopScript(stopScript);
                    softwareConfig.setdId(record.getdId());
                    softwareConfig.setEdgeDeviceId(software.getEdgeServerId());
                    softwareConfig.setsName(software.getFileName());
                    softwareConfig.setsId(software.getId());
                    softwareConfig.setVersion(software.getVersion());
                    softwareConfig.setsUrl(software.getFilePath());
                    softwareConfig.setCode(UUID.randomUUID().toString().substring(0,8).replace("-","a").trim());
                    softwareConfigs.add(softwareConfig);
                }
            }
        }
        // 判断是否存在，存在不需要重复添加
        for (int i = 0; i < softwareConfigs.size(); i++){
            List<SoftwareConfig> configs = softwareMapper.selectSoftwareConfigBysId(softwareConfigs.get(i).getdId(), softwareConfigs.get(i).getEdgeDeviceId(),softwareConfigs.get(i).getsId());
            if(null != configs && configs.size() > 0){
                softwareConfigs.remove(softwareConfigs.get(i));
                i=i-1;
            }
        }

        if(softwareConfigs.size() > 0 && null != softwareConfigs){
            softwareMapper.insertSoftWareConfig(softwareConfigs);
        }
        record.setId(insert);
        return ResponseModel.ok(record);
	}

    /**
     * @param eId
     * @param nodeData
     * @param cameraLineList
     * @param inStoreDevice
     * @param cameraForHeatingPower
     * @param camLists
     * @param controlServerHeartCameras
     * @param
     */
	public void addData(Integer eId, NodeData nodeData, List<CameraCoordinates> cameraLineList, HashMap<String, Object> inStoreDevice,
                        List<Integer> cameraForHeatingPower, List<ControlServerCamList> camLists, List<ControlServerCamera> controlServerHeartCameras){
        if(StringUtils.isEmpty(nodeData.getUseType())){
            eId = nodeData.getId();
        }else{
            // 1.进店摄像头的进店画线数据 目前只有一台
            if(CommonParams.CAMERA_USE_TYPE_1.equals(nodeData.getUseType())){
                cameraLineList = nodeData.getCameraLineList();
                inStoreDevice.put("inStoreDeviceId", nodeData.getId());
                inStoreDevice.put("inStoreDeviceRtspurl", nodeData.getRtspurl());
            }
            if(CommonParams.CAMERA_USE_TYPE_2.equals(nodeData.getUseType())){
                cameraForHeatingPower.add(nodeData.getId());
            }
            //2.视频流地址  <id: 地址>
            ControlServerCamList serverCamList = new ControlServerCamList();
            serverCamList.setId(nodeData.getId());
            serverCamList.setUri(nodeData.getRtspurl());
            camLists.add(serverCamList);
            //3.心跳  <code: 地址>
            ControlServerCamera camera = new ControlServerCamera();
            camera.setCode(nodeData.getCode());
            camera.setHost(nodeData.getRtspurl());
            controlServerHeartCameras.add(camera);
        }
    }
    /**
     * @param record
     * @param eId
     * @return  向controlServer发送配置信息
     */
/*	public ResponseModel sendControlServerConfig(DepartmentDeviceTopology record ,List<Integer> cameraForHeatingPower ,
                                                 Integer eId, List<ControlServerCamList> camLists, List<CameraCoordinates>  cameraLineList,
                                                 HashMap<String, Object>  inStoreDevice, List<ControlServerCamera> controlServerHeartCameras){*/
    public ResponseModel sendControlServerConfig(DepartmentDeviceTopology record , Integer eId){
        // 组装单个模型的数据
    /*    ResponseModel responseModel = edgeServiceImpl.selectDeviceByTx2IdAndDepartmentId(record.getdId(), eId);
        HashMap<String,Object> deepstreamHashmap = (HashMap<String, Object>) responseModel.getResult();
       *//* StringBuffer stringBuffer = new StringBuffer();
        ResponseModel responseModel = new ResponseModel();
        if(cameraForHeatingPower.size() > 0 && null != cameraForHeatingPower){
            // 1.ds-example
            HashMap<String, Object> deepHashmap = new HashMap<>();
            HashMap<String, Object> hashmap = new HashMap<>();
            HashMap<String, Object> dsExampleHashmap = new HashMap<>();
            HashMap<String, Object> camListHashmap = new HashMap<>();
            HashMap<String, Object> smartStoreAddHashmap = new HashMap<>();
            HashMap<String, Object> enterJudgmentHashmap = new HashMap<>();
            HashMap<String, Object> sendHashmap = new HashMap<>();
            HashMap<String, Object> sendAddHashmap = new HashMap<>();
            HashMap<String, Object> tx2HeartHashmap = new HashMap<>();
            HashMap<String, Object> tx2AddHashmap = new HashMap<>();
            HashMap<String, Object> deepstreamHashmap = new HashMap<>();

            Department department = departmentMapper.selectByPrimaryKey(record.getdId());

            dsExampleHashmap.put("sid",department.getBtitdCode());
            dsExampleHashmap.put("cid",eId);
            for(Integer i : cameraForHeatingPower){
                stringBuffer.append( i + ";");
            }
            String substring = stringBuffer.toString().substring(0, stringBuffer.length() - 1);
            dsExampleHashmap.put("index",substring);
            hashmap.put("ds-example",dsExampleHashmap);

            // 2.camList
            camListHashmap.put("camList",camLists);
            deepHashmap.putAll(hashmap);
            deepHashmap.putAll(camListHashmap);
            // 3.smartstore   进店摄像头的画线数据
            ControlServerCameraLineList cameraLineList1 = new ControlServerCameraLineList();
            if(cameraLineList.size() > 0 && null != cameraLineList){
                CameraCoordinates cameraCoordinates = cameraLineList.get(0);
                int[] lineStart = {(int)cameraCoordinates.getStartX(),(int)cameraCoordinates.getStartY()};
                int[] lineEnd = {(int)cameraCoordinates.getEndX(),(int)cameraCoordinates.getEndY()};
                int[] directionStart = {(int)cameraCoordinates.getArrowsStartX(),(int)cameraCoordinates.getArrowsStartY()};
                int[] directionEnd = {(int)cameraCoordinates.getArrowsEndX(),(int)cameraCoordinates.getArrowsEndY()};
                cameraLineList1.setLineStart(lineStart);
                cameraLineList1.setLineEnd(lineEnd);
                cameraLineList1.setDirectionEnd(directionStart);
                cameraLineList1.setDirectionStart(directionEnd);
            }
            enterJudgmentHashmap.put("ENTER_JUDGMENT",cameraLineList1);

            // 进店摄像头的数据 - 视频流地址
            sendAddHashmap.put("video_source",inStoreDevice.get("inStoreDeviceRtspurl"));
            sendAddHashmap.put("sid",department.getBtitdCode());
            sendAddHashmap.put("eid",eId);
            sendAddHashmap.put("cid",inStoreDevice.get("inStoreDeviceId"));
            sendHashmap.put("SEND",sendAddHashmap);
            smartStoreAddHashmap.putAll(enterJudgmentHashmap);
            smartStoreAddHashmap.putAll(sendHashmap);

            // 4.tx2 配置
            tx2HeartHashmap.put("camera",controlServerHeartCameras);
            tx2AddHashmap.putAll(tx2HeartHashmap);

            // 5.组装
            deepstreamHashmap.put("deepstream",deepHashmap);
            deepstreamHashmap.put("smartstore",smartStoreAddHashmap);
            deepstreamHashmap.put("tx2",tx2AddHashmap);*//*
            // 1. 修改全局配置
            responseModel = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/project/"+ record.getdId() +"/device/"+ eId +"/model/changeConfig", deepstreamHashmap, ResponseModel.class);
            if(responseModel.getStatus() != 0){
                logger.error("controlServer not first run error ,message is {}", responseModel.getMessage());
                return responseModel;
            }else{
                // 延迟查询
                logger.info("延时前:"+ new Date().toString());
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                logger.info("延时后:"+ new Date().toString());
                HashMap hashMap = (HashMap)responseModel.getResult();
                ResponseModel responseModelResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/result", hashMap, ResponseModel.class);
                logger.info("seccessful request update config , select ststus is {} result is {} " + responseModelResult.getStatus() + responseModelResult.getResult());
                int length = getLength(responseModelResult.getResult());
                if(length < 2){
                    return ResponseModel.fail(CommonParams.SELECT_RESULT_FAIL,1);
                }
            }
        // 2. 重启tx2关联所有模型
        List<SoftwareConfig> softwareConfigs = softwareMapper.selectSoftwareConfig(record.getdId(), eId);

        for(SoftwareConfig so : softwareConfigs){
            EdgeServerInitVo edgeServerInitvO = new EdgeServerInitVo();
            edgeServerInitvO.setSoftwareCode(so.getsCode());
            edgeServerInitvO.setModelCode(so.getCode());
            run(record.getdId(), eId, edgeServerInitvO);
        }*/
           /* reStartToContrlServer("smartstore", record.getdId(), eId);
            reStartToContrlServer("deepstream", record.getdId(), eId);*/
        //}

        return ResponseModel.ok(0);
    }
	@Override
//	@Cacheable(cacheNames = "allDeviceTopology", key = "#id")
	public DepartmentDeviceTopology selectDepartmentDeviceTopologyById(Integer id) {
       // DepartmentDeviceTopologyParamVo result = new DepartmentDeviceTopologyParamVo();
        // 回显拓扑图
        DepartmentDeviceTopology departmentDeviceTopologies = topologyMapper.selectTopologyByDepartmentId(id);

     /*  List<LinkData> linkData = new ArrayList<>();
         if(null != departmentDeviceTopologies && departmentDeviceTopologies.size() > 0){
			for(DepartmentDeviceTopology param: departmentDeviceTopologies){
				LinkData data =new LinkData();
				data.setFrom(param.getFromDeviceId());
				data.setFromPort("output");
				data.setTo(param.getToDeviceId());
				data.setToPort("input");
				linkData.add(data);
			}
		}*/
      /*  result.setLinkDataArray(linkData);
        List<NodeDataVo> nodeDataList = new ArrayList<>();
        List<NodeData> departmentDeviceTopologyParam = topologyMapper.selectAllTopology(id);
        if(null != departmentDeviceTopologyParam && departmentDeviceTopologyParam.size() > 0){
			for(NodeData  nodeData: departmentDeviceTopologyParam){
				result.setLinkFromPortIdProperty(nodeData.getLinkFromPortIdProperty());
				result.setLinkToPortIdProperty(nodeData.getLinkToPortIdProperty());
                NodeDataVo nodeDataVo = new NodeDataVo();
                nodeDataVo.setId(Integer.parseInt(nodeData.getnId()));
                nodeDataVo.setCode(nodeData.getCode());
                nodeDataVo.setSource(nodeData.getName());
                nodeDataVo.setKey(nodeData.getKye());
                nodeDataVo.setCategory(nodeData.getCategory());
                nodeDataVo.setLoc(nodeData.getLoc());
                nodeDataVo.setdId(nodeData.getdId());
                nodeDataVo.setTextimg(nodeData.getTextimg());
                nodeDataVo.setIdx(nodeData.getIdx());
                nodeDataVo.setName(nodeData.getName());
                nodeDataVo.setType(nodeData.getType());
				// 携带参数返回
				if(!"department".equals(nodeData.getType())){
                    DepartmentDevice device = deviceMapper.selectByPrimaryKey(nodeData.getId());
                    if(null != device){
                        nodeDataVo.setParameter(device.getParam());
                        nodeDataVo.setDescription(device.getDescription());
                    }
                }
				nodeDataList.add(nodeDataVo);
			}
		}
        result.setNodeDataArray(nodeDataList);*/

        return departmentDeviceTopologies;

	}

	@Override
	//@Cacheable(cacheNames = "allDeviceTopology")
	public List<Department> selectAllDepartmentTopology() {
        List<Department> departmentList = selectAllDepartment(null, null);
        return departmentList;
	}

	@Override
	//@Cacheable(cacheNames = "allDeviceTopology",key="#departmentId")
	public List<DepartmentDeviceTopology> selectAllDepartmentTopologyByDepartmentId(Integer departmentId) {
		return null;
	}

	@Override
	//@CachePut(cacheNames="DeviceTopology",key = "#record.id")
	public int updateDepartmentDeviceTopologyById(DepartmentDeviceTopology record) {
		return topologyMapper.updateByPrimaryKey(record);
	}

    /**
     * @about select department address
     * @return
     */
    @Override
    public ResponseModel getDepartmentAddress() {
        List<City> city = departmentMapper.getDepartmentAddress();
        List<TreeType> nodes = Lists.newArrayList();

        for (int i = 0; i < city.size(); i++) {
            nodes.add(new TreeType(city.get(i).getId(), city.get(i).getName(), city.get(i).getName(), city.get(i).getpId()));
        }
        return ResponseModel.ok(TreeConfig.getTree(nodes));
    }

    /**
     * @about department edgeDevice detail
     * @param id
     * @return
     */
    @Override
   // @Cacheable(cacheNames = "DepartmentDevice", key = "#id")
    public List<DepartmentDevice> getDepartmentEdgeDevicedetail(Integer id) {
        return deviceMapper.getDepartmentEdgeDevicedetail(id);
    }

	/**
	 * @param departmentId
	 * @return
	 * @about get DepartmentsConfig File For Camera
	 */
	@Override
	public ResponseModel getDepartmentsConfigForCamera(Integer departmentId) {
	    // 1.校验门店是否存在
        Department department = departmentMapper.selectByPrimaryKey(departmentId);
        HashMap<Object, Object> hashMap = new HashMap<>();
        hashMap.put("whetherInstall",0);
        if(null != department){
            // 2.校验是否安装过  0 没有 1 已安装
            List<DepartmentDevice> departmentDevices = deviceMapper.selectByDepartmentId(departmentId);
            for(DepartmentDevice departmentDevice : departmentDevices){
                if(departmentDevice.getInstallStatus() == 1){
                    hashMap.put("whetherInstall",1);
                }
            }
            // 该门店下所有的摄像头部署文件
            List<HardwareDeploymentFile> hardwaresList = deviceHardwareMapper.selectAllEdgeDeviceHardwareByDeviceId(departmentId);
            hashMap.put("deploymentFile",hardwaresList);
            return ResponseModel.ok(hashMap);
        }else {
            return ResponseModel.fail("该门店不存在！", -1);
        }
	}
    /**
     * @return
     * @about get All DepartmentsConfig File For Camera
     */
    @Override
    public List<HardwareDeploymentFile> getAllDepartmentsConfigForCamera() {
        // 获取所有门店摄像头部署文件
        List<HardwareDeploymentFile> hardwaresList = deviceHardwareMapper.selectAllEdgeDeviceHardwareByDeviceId(null);
        return  removeDuplicateCase(hardwaresList);
    }

    /**
     * @param cases
     * @return list 去重
     */
    private List<HardwareDeploymentFile> removeDuplicateCase(List<HardwareDeploymentFile> cases) {
        Set<HardwareDeploymentFile> set = new TreeSet<>(new Comparator<HardwareDeploymentFile>() {
            @Override
            public int compare(HardwareDeploymentFile o1, HardwareDeploymentFile o2) {
                //字符串,则按照asicc码升序排列
                return o1.getdId().compareTo(o2.getdId());
            }
        });
        set.addAll(cases);
        return new ArrayList<>(set);
    }
    @Override
	public PageResult<Department> selectPageDepartment(PageRequest pageRequest, String name, String dCode) {
		int pageNum = pageRequest.getPageNum();
		int pageSize = pageRequest.getPageSize();
		PageHelper.startPage(pageNum, pageSize);
		List<Department> sysMenus = selectAllDepartment(name, dCode);
		return PageUtils.getPageResult(pageRequest, new PageInfo<Department>(sysMenus));
	}

	@Override
	public PageResult<DepartmentDevice> selectPageDepartmentDevice(Integer departmentId, String type,
			PageRequest pageRequest) {
		int pageNum = pageRequest.getPageNum();
		int pageSize = pageRequest.getPageSize();
		PageHelper.startPage(pageNum, pageSize);
		List<DepartmentDevice> sysMenus = selectAllDepartmentDevice();
		return PageUtils.getPageResult(pageRequest, new PageInfo<DepartmentDevice>(sysMenus));
	}
    @Override
    public List<Department> selectAllDepartment() {
        List<Department> sysMenus = selectAllDepartment(null, null);
        List<Integer> ids = new ArrayList<>();
        for(Department department : sysMenus){
            ids.add(department.getId());
        }
        List<DepartmentDeviceTopology> departmentDeviceTopology = topologyMapper.selectTopologyByDepartmentIds(ids);
        if(null != departmentDeviceTopology && !"".equals(departmentDeviceTopology)){
            for(Department department : sysMenus){
                for(DepartmentDeviceTopology deviceTopology : departmentDeviceTopology){
                    if(department.getId().equals(deviceTopology.getdId())){
                        if(null != deviceTopology.getData() && !"".equals(deviceTopology.getData())){
                            department.setData(deviceTopology.getData());
                        }
                    }
                }
            }
        }
        return sysMenus;
    }

	/**
	 * @param dId
	 * @return
     * @about 心跳机制<根据店铺id返回设备详情>
	 */
    @Override
    public List<EdgeDeviceStatusVo> selectEquipmentDetail(Integer dId) {
        List<DepartmentDevice> departmentDevices = edgeServiceImpl.selectEquipmentDetail(dId);
        List<EdgeDeviceStatusVo> edgeDeviceStatusVoList = new ArrayList<>();
        if(departmentDevices != null && departmentDevices.size() > 0){
            for(DepartmentDevice device : departmentDevices){
                EdgeDeviceStatusVo edgeDeviceStatusVo = new EdgeDeviceStatusVo();
                edgeDeviceStatusVo.setId(device.getId());
                edgeDeviceStatusVo.setName(device.getServerName());
                edgeDeviceStatusVo.setCode(device.getServerCode());
                edgeDeviceStatusVo.setStatus((device.getStatus()));
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                String format = simpleDateFormat.format(new Date());
                edgeDeviceStatusVo.setDetectionDate(format);
                if(edgeDeviceStatusVo.getStatus() == 1){
                    edgeDeviceStatusVo.setErrorMsg(CommonParams.HEART_ERR_MSG);
                }
                edgeDeviceStatusVoList.add(edgeDeviceStatusVo);
            }
        }
        return edgeDeviceStatusVoList;
    }

    /**
     * @param lenovoToken
     * @about get jwttoken
     */
    @Override
    public ResponseModel getJwttoken(String lenovoToken) {
       // logger.info("get Jwttoken is {} " , lenovoToken);
        String result = restTemplate.getForObject(GET_JWT_TOKEN_URL+lenovoToken, String.class);
        ResponseModel responseModel = JSONObject.parseObject(result, ResponseModel.class);
       // logger.info("get Jwttoken result is {} " , responseModel );
        return responseModel;
    }

    /**
     * @param edgeDeviceStatusVoList
     * @return 心跳机制<每一分钟接收一次>
     */
    @Override
    public ResponseModel whetherDepartmentDeviceIsNormal(List<EdgeDeviceStatusVo> edgeDeviceStatusVoList) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String format = simpleDateFormat.format(new Date());
        List<String> backKey = new ArrayList<>();
        HashMap<String, Object> hashMap = new HashMap<>();
        List<DepartmentDevice> deviceStatusVoList = new ArrayList<>();
        for(EdgeDeviceStatusVo edgeDeviceStatusVo : edgeDeviceStatusVoList){
            DepartmentDevice deviceStatusVo = new DepartmentDevice();
            deviceStatusVo.setServerCode(edgeDeviceStatusVo.getCode());
            deviceStatusVo.setStatus(0);
            String forValue = redisHelper.getForValue(edgeDeviceStatusVo.getCode());
            // 首次存入redis
            if(null != forValue && !"".equals(forValue)){
                Date date = TimeUtil.dateFormat(forValue);
                int timeInterval = TimeUtil.timeInterval(new Date(), date);
                if(timeInterval > 60 || edgeDeviceStatusVo.getStatus() != 0){  // 未接收到请求，状态为异常
                    deviceStatusVo.setStatus(1);
                }
                redisHelper.removeForValue(edgeDeviceStatusVo.getCode());
            }
            redisHelper.setForValue(edgeDeviceStatusVo.getCode() ,format);
            backKey.add(edgeDeviceStatusVo.getCode());
            deviceStatusVoList.add(deviceStatusVo);
        }
        if(null != deviceStatusVoList && deviceStatusVoList.size() > 0){
            deviceMapper.updateDeviceStatus(deviceStatusVoList);
        }

        hashMap.put("departmentDeviceKeyList",backKey);
        return ResponseModel.ok(hashMap);
    }

    /**
     * @return  controlService 发送消息说明agent 已上线
     */
    @Override
    public ResponseModel getNoticeForAgent(Integer storeId, Integer deviceId) {

        int result = softwareMapper.updateSoftwareConfigCanInit(storeId,deviceId);

        return ResponseModel.ok(result);
    }

    public HashMap<String,Object> initModelParam(Integer storeId, Integer deviceId,EdgeServerInitVo edgeServerInitvO){
        // TODO 之前使用id,目前更换成code
        Department department = departmentMapper.selectByPrimaryKey(storeId);
        DepartmentDevice departmentDevice = deviceMapper.selectByPrimaryKey(deviceId);
        ResponseModel responseResult = edgeServiceImpl.selectDeviceByTx2IdAndDepartmentId(department.getBtitdCode(), departmentDevice.getServerCode());
        // 单个模型init<过滤>
        HashMap<String,Object> hashMapForInit = (HashMap<String, Object>) responseResult.getResult();
        List<SoftwareForDevice> softwareList = (List<SoftwareForDevice>)hashMapForInit.get("allSoftwareList");
        SoftwareConfig softwareConfig = softwareMapper.selectModelScript(edgeServerInitvO.getModelCode());
        List<String> software = new ArrayList<>();
        List<SoftwareForDevice> softwareListNow = new ArrayList<>();

        SoftwareForDevice softwareForDevice = new SoftwareForDevice();
        software.add(edgeServerInitvO.getModelCode());
        softwareForDevice.setSoftwareConfigCode(software);
        for(SoftwareForDevice s : softwareList){
            if(s.getCode().equals(edgeServerInitvO.getSoftwareCode())){
                softwareForDevice.setName(s.getName());
                softwareForDevice.setUrl(s.getUrl());
                softwareForDevice.setId(s.getId());
                softwareForDevice.setVersion(softwareConfig.getVersion());
                softwareForDevice.setCode(s.getCode());
            }
        }
        softwareListNow.add(softwareForDevice);

        hashMapForInit.put("softwareList",softwareListNow);
        return hashMapForInit;
    }
    /**
     * @param storeId
     * @param deviceId
     * @return  init模型
     */
    public ResponseModel init(Integer storeId, Integer deviceId,EdgeServerInitVo edgeServerInitvO,HttpServletResponse response){
        ResponseModel responseResult = new ResponseModel();
        // 1.1 校验摄像头不可为空
        if(null == edgeServerInitvO.getCaremaList()){
            return ResponseModel.fail("请选择该模型下需要配置的摄像头！", -1);
        }
        // 1.2 校验摄像头匹配的模型是否正确
       /* SoftwareConfig softwareConfig = softwareMapper.selectModelScript(edgeServerInitvO.getModelCode());
        if(softwareConfig.getsName().contains(CommonParams.MODEL_SMARTSTORE)){
           if(edgeServerInitvO.getCaremaList().size() >= 2){
               return ResponseModel.fail("进店模型只支持一台设备！" , -1);
           }
        }*/
        // 1.3 校验是否可以初始化<安装摄像头校对图审核通过>
       /* List<DepartmentDevice> departmentDevices = deviceMapper.getDepartmentEdgeDevicedetail(storeId);
        for(DepartmentDevice departmentDevice :departmentDevices){
            if(departmentDevice.geteType().equals("edge")){
                continue;
            }
            if(departmentDevice.getInstallStatus() != 3){
                return ResponseModel.fail("存在摄像头未校对成功",-1);
            }
        }*/

        List<Integer> initCaremaList = edgeServerInitvO.getCaremaList();
        // 2 .组装单个模型(过滤已选择的摄像头)的数据
        HashMap<String, Object> hashMapForInit = initModelParam(storeId, deviceId, edgeServerInitvO);
        List<CaremaVo> caremaList  =  (List<CaremaVo>)hashMapForInit.get("cameraList");
        List<CaremaVo> caremaListNew  =  new ArrayList<>();
        for(Integer i : initCaremaList){
           for(CaremaVo caremaVo :caremaList){
               if(caremaVo.getCaremaId().equals(i)){
                   if(caremaVo.getCameraType() == 1){
                       if(caremaVo.getLineList().size() == 0){
                           // 1.4 校验是否可以初始化<进店摄像头进店线数据不可为空>
                           return ResponseModel.fail("进店摄像头画线数据不可为空！", -1 );
                       }
                   }
                   caremaListNew.add(caremaVo);
               }
           }
        }
        hashMapForInit.put("cameraList", caremaListNew);
        hashMapForInit.put("caremaList", caremaListNew);
        hashMapForInit.put("allCameraList", caremaList);
        int result = 0;
        // 3. 请求init服务
        responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT+ "/aimigos/v1/project/"+storeId+"/device/"+deviceId+"/model/init/v1.1", hashMapForInit, ResponseModel.class);
        logger.info("init result  is {} ", responseResult.getMessage());
        // 4. 返回成功修改本地run脚本
        if(responseResult.getStatus() == 0){
            HashMap<String,Object> hashMap = (HashMap) responseResult.getResult();
            if(null != hashMap){
                List<ModelInitResult> modelInitResults = (List<ModelInitResult>)hashMap.get("softwareConfiglist");
                String agentConfig = (String)hashMap.get("agentConfig");
                if(modelInitResults.size() > 0 && null != modelInitResults){
                    result = softwareMapper.updateSoftwareConfig(modelInitResults,storeId,deviceId);
                }
                if(StringUtils.isNotBlank(agentConfig)){
                    deviceMapper.updateDeviceConfig(deviceId,agentConfig);
                }else{
                    return ResponseModel.fail("tx2 配置文件获取为空 ！", -1);
                }
            }
           // 5. 修改设备isconfig
          // deviceMapper.updateDeviceIsConfig(initCaremaList);
        }else{
            logger.error("controlServer init error ,message is {}", responseResult.getMessage());
            return responseResult;
        }
        return ResponseModel.ok(result);
    }

    /**
     * @param storeId
     * @param deviceId
     * @return run 服务
     */
    @Override
    public ResponseModel run(Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO) {
        // 1.校验是否可以初始化<安装摄像头校对图审核通过>
       /*  List<DepartmentDevice> departmentDevices = deviceMapper.getDepartmentEdgeDevicedetail(storeId);
       for(DepartmentDevice departmentDevice :departmentDevices){
            if(departmentDevice.geteType().equals("edge")){
                continue;
            }
            if(departmentDevice.getInstallStatus() != 3){
                return ResponseModel.fail("存在摄像头未校对成功",-1);
            }
        }*/
        ResponseModel responseResult = new ResponseModel();
        // 2.查询启动脚本
        SoftwareConfig softwareConfig = softwareMapper.selectModelScript(edgeServerInitvO.getModelCode());
        String base64RunScript = "";
        if(StringUtils.isNotBlank(softwareConfig.getRunScript())){
            Base64 base64 = new Base64();
            try {
                base64RunScript = base64.encodeToString(softwareConfig.getRunScript().getBytes("UTF-8"));
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            HashMap<String, Object> hashMapResult = new HashMap<>();
            hashMapResult.put("shell",base64RunScript);
            hashMapResult.put("run_type","now");
            hashMapResult.put("time","");
            hashMapResult.put("arg","");
            logger.info("start run model code is {}",edgeServerInitvO.getModelCode());
            // 调用run服务
            responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "api/aimigos/" + storeId + "/" + deviceId + "/model/run", hashMapResult, ResponseModel.class);
            if(responseResult.getStatus() != 0){
                logger.error("controlServer run error ,message is {}", responseResult.getMessage());
            }
        }else{
            return ResponseModel.fail("该模型执行脚本为空！",-1);
        }
        return responseResult;
    }

    @Override
    public List<EdgeServerDetail> getDeviceList(Integer departmentId) {
        Department department = departmentMapper.selectByPrimaryKey(departmentId);
        // 3.设备模型列表
        List<EdgeServerDetail> edgeServerDetailList = new ArrayList<>();
        List<EdgeServer> edgeServerList = new ArrayList<>();
        // 3.1 查找tx2
        List<DepartmentDeviceForBtit> edgeList = deviceMapper.selectDeviceByDepartmentId(departmentId, "edge");

        List<SoftwareConfig> softwareConfig = new ArrayList<>();
        for(DepartmentDeviceForBtit deviceForBtit :edgeList){
            List<SoftwareConfig> softwareConfigList = softwareMapper.selectSoftwareConfigAndSoftware(departmentId,deviceForBtit.getId());
            softwareConfig.addAll(softwareConfigList);
        }

        // 4.1 组装列表返回: 一级菜单设备列表（转换格式为一级二级菜单）
        for (int i = 0; i < edgeList.size(); i++) {
            EdgeServerDetail edgeServerDetail = new EdgeServerDetail();
            edgeServerDetail.setId(edgeList.get(i).getId());
            edgeServerDetail.setEdgeServerCode(edgeList.get(i).getDeviceCode());
            edgeServerDetail.setEdgeServerId(edgeList.get(i).getId());
            edgeServerDetail.setEdgeServerName(edgeList.get(i).getDeviceName());
            edgeServerDetail.setParentId(0);
            edgeServerDetailList.add(edgeServerDetail);
             // TODO 模型升级修改：
            // 4.2 组装列表返回: 二级菜单：根据模型类型分组
            List<SoftwareConfig> softwareConfigs = softwareMapper.selectSoftwareConfigAndSoftware(departmentId, edgeList.get(i).getId());
            Map<Integer, List<SoftwareConfig>> collect = softwareConfigs.stream().collect(Collectors.groupingBy(SoftwareConfig::getsId));
            Set<Integer> integers = collect.keySet();
            for(Integer l : integers){
                for(SoftwareConfig softwareConfig1 : softwareConfigs){
                    if(softwareConfig1.getsId().equals(l)){
                        EdgeServerDetail edgeServerDetail2 = new EdgeServerDetail();
                        edgeServerDetail2.setId((softwareConfig1.getsId() + softwareConfig1.getEdgeDeviceId()) * softwareConfig1.getEdgeDeviceId());
                        edgeServerDetail2.setEdgeServerId(softwareConfig1.getEdgeDeviceId());
                        edgeServerDetail2.setSoftwareCode(softwareConfig1.getsCode());
                        edgeServerDetail2.setModelName(softwareConfig1.getsName());
                        edgeServerDetail2.setModelDownUrl(softwareConfig1.getsUrl());
                        edgeServerDetail2.setParentId(softwareConfig1.getEdgeDeviceId());
                        // 3.2查询版本号
                        Software sCodeBean = softwareMapper.selectByCode(softwareConfig1.getsCode());
                        // 1 表示可升级
                        edgeServerDetail2.setFlag(sCodeBean.getVersion().equals(softwareConfig1.getVersion()) ? 0 : 1);
                        edgeServerDetail2.setVersion(softwareConfig1.getVersion());
                        if(!edgeServerDetailList.contains(edgeServerDetail2)){
                            edgeServerDetailList.add(edgeServerDetail2);
                        }
                    }
                }
            }
        }

        //  新增实例选择的摄像头
        List<DepartmentDeviceForBtit> departmentDevices = deviceMapper.selectDeviceByDepartmentId(departmentId, "end");
        List<CaremaPo> caremaList = new ArrayList<>();
        int flag = 0;
        for(DepartmentDeviceForBtit departmentDevice :departmentDevices){
            CaremaPo caremaPo = new CaremaPo();
            caremaPo.setCaremaId(departmentDevice.getId());
            caremaPo.setCaremaName(departmentDevice.getDeviceName());
            // 查询tx2的信息
            DepartmentDeviceTopology topology = topologyMapper.selectTopologyByDeviceId(departmentId, departmentDevice.getId());
            caremaPo.setEdgeServerId(topology.getFromDeviceId());
            if(StringUtils.isBlank(departmentDevice.getType())){
                flag = 1 ;
            }else{
                caremaPo.setCaremaType(Integer.parseInt(departmentDevice.getType()) == 1 ? CommonParams.CAMERA_USE_TYPE_1 : CommonParams.CAMERA_USE_TYPE_2);
                caremaList.add(caremaPo);
            }
        }
        int j = 0;
        // 4.3 组装列表返回: 三级级菜单设备列表
        if(softwareConfig.size() > 0 && null != softwareConfig){
            for(SoftwareConfig software :softwareConfig){
                if(software.getDelFlag() != 0){
                    continue;
                }
                EdgeServerDetail detail = new EdgeServerDetail();
                detail.setId(j);
                detail.setEdgeServerId(software.getEdgeDeviceId());
                for(DepartmentDeviceForBtit deviceForBtit : edgeList){
                    if(deviceForBtit.getId().equals(software.getEdgeDeviceId())){
                        detail.setEdgeServerName(deviceForBtit.getDeviceName());

                        String key = deviceForBtit.getDeviceCode() + "-" + software.getCode();
                        if(StringUtils.isNotBlank(key)){
                            String forValue = redisHelper.getForValue(key);
                            logger.info("model heartbeat , redis key {} , get value is {} " + key + forValue);
                            detail.setStatus(StringUtils.isNotBlank(forValue) ? forValue : CommonParams.DEPARTMENT_DEVICE_NOT_STATUS);
                        }
                    }
                }
                detail.setModelName(software.getsName());
                detail.setModelId(software.getId());
                detail.setModelCode(software.getCode());
                detail.setSoftwareCode(software.getsCode());
                detail.setModelDownUrl(software.getsUrl());
                detail.setCanInitFlag(software.getCanInitFlag());
                // 3.2查询版本号
                Software sCodeBean = softwareMapper.selectByCode(software.getsCode());
                // 1 表示可升级
                detail.setFlag(sCodeBean.getVersion().equals(software.getVersion()) ? 0 : 1);
                detail.setVersion(software.getVersion());
                detail.setParentId((software.getsId() + software.getEdgeDeviceId()) * software.getEdgeDeviceId());
                // 返回可选的摄像头：
                if(flag == 0){
                   /* if(detail.getModelName().contains(CommonParams.MODEL_SMARTSTORE)){
                        List<CaremaPo> newResult = caremaList
                                .stream().filter(a -> a.getCaremaType().equals(CommonParams.CAMERA_USE_TYPE_1)).collect(Collectors.toList())
                                .stream().filter(a -> a.getEdgeServerId().equals(detail.getEdgeServerId())).collect(Collectors.toList());
                        detail.setCaremaList(newResult);
                    }else{
                        List<CaremaPo> newResult = caremaList
                                .stream().filter(a -> a.getCaremaType().equals(CommonParams.CAMERA_USE_TYPE_2)).collect(Collectors.toList())
                                .stream().filter(a -> a.getEdgeServerId().equals(detail.getEdgeServerId())).collect(Collectors.toList());
                        detail.setCaremaList(newResult);
                    }*/
                    List<CaremaPo> newResult = caremaList
                            .stream().filter(a -> a.getEdgeServerId().equals(detail.getEdgeServerId())).collect(Collectors.toList());
                    detail.setCaremaList(newResult);
                }
                edgeServerDetailList.add(detail);
                j++;
            }
        }
        List<EdgeServerDetail> tree = TreeConfig.getTree2(edgeServerDetailList);
        return tree;
    }

    /**
     * @param deviceId ,modelId
     * @return 根据id查找配置详情
     */
    @Override
    public HashMap<String,Object> getConfig(String type,Integer deviceId) {
        HashMap<String, Object> hashMap = new HashMap<>();
        String serverConfig = "";
        if(!CommonParams.MODEL.equals(type)){
            DepartmentDevice departmentDevice = deviceMapper.selectByPrimaryKey(deviceId);
            serverConfig = departmentDevice.getServerConfig();
        }else{
            SoftwareConfig softwareConfig = softwareMapper.selectSoftwareConfigById(deviceId);
            serverConfig = softwareConfig.getContent();
        }
        hashMap.put("deviceConfig",serverConfig);
        return hashMap;
    }



    /**
     * @param softwareConfig
     * @param departmentId
     * @param deviceId
     * @return 添加实例
     */
    @Override
    public ResponseModel addModelConfig(EdgeServerDetail edgeServerDetail, Integer departmentId, Integer deviceId) {

        SoftwareConfig softwareConfig = new SoftwareConfig();
        String stopScript ="#!/bin/bash\n" +
                "\n" +
                "pid=`ps -ef |grep %s |grep -v 'grep'| awk '{ print $2 }'`;\n" +
                "\n" +
                "if [  -n  \"$pid\"  ];  then\n" +
                "   echo pid=$pid\n" +
                "   kill  $pid;\n" +
                "fi";
        softwareConfig.setdId(departmentId);
        softwareConfig.setEdgeDeviceId(deviceId);
        String content = "";
        String runScript = "";
        Software software = softwareMapper.selectByCode(edgeServerDetail.getSoftwareCode());
        List<SoftwareConfig> softwareConfigs = softwareMapper.selectSoftwareConfigForCanUse(departmentId, deviceId);
        for(SoftwareConfig software1 : softwareConfigs){
            if(software1.getsId().equals(software.getId())){
               content = software1.getContent();
               runScript = software1.getRunScript();
            }
        }
        softwareConfig.setsName(software.getFileName());
        softwareConfig.setsId(software.getId());
        softwareConfig.setVersion(software.getVersion());
        softwareConfig.setCanInitFlag(1);
        softwareConfig.setsUrl(software.getFilePath());
        softwareConfig.setsCode(software.getsCode());
        softwareConfig.setCode(UUID.randomUUID().toString().substring(0,8).replace("-","a").trim());
        softwareConfig.setStopScript(stopScript);
        softwareConfig.setContent(content);
        softwareConfig.setRunScript(runScript);

        int i = softwareMapper.insertSoftWareConfigBean(softwareConfig);
        if(i > 0){
            return ResponseModel.ok(softwareConfig);
        }else{
            return ResponseModel.fail("添加失败！",-1);
        }

    }

    /**
     * @param storeId
     * @param deviceId
     * @param edgeServerInitvO
     * @return 手动停止模型
     */
    @Override
    public ResponseModel stopModel(Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO) {
        ResponseModel responseResult = new ResponseModel();
        // 1.查询停止脚本
        SoftwareConfig softwareConfig = softwareMapper.selectModelStopScript(edgeServerInitvO.getModelCode());
        if(null == softwareConfig){
            return ResponseModel.fail("模型不存在！", -1);
        }
        String replace = softwareConfig.getStopScript().replace("%s", edgeServerInitvO.getModelCode());
        String base64StopScript = "";
        if(StringUtils.isNotBlank(softwareConfig.getStopScript())){
            Base64 base64 = new Base64();
            try {
                base64StopScript = base64.encodeToString(replace.getBytes("UTF-8"));
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            HashMap<String, Object> hashMapResult = new HashMap<>();
            hashMapResult.put("shell",base64StopScript);
            hashMapResult.put("run_type","now");
            hashMapResult.put("time","");
            hashMapResult.put("arg","");
            logger.info("start stop model code is {}",edgeServerInitvO.getModelCode());
            // 2.调用停止模型服务
            responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "api/aimigos/" + storeId  + "/" + deviceId + "/command/execute", hashMapResult, ResponseModel.class);
            if(responseResult.getStatus() != 0){
                logger.error("controlServer run error ,message is {}", responseResult.getMessage());
            }
        }else{
            return ResponseModel.fail("该模型执行脚本为空！",-1);
        }

        if(responseResult.getStatus() == 0){
            // 延迟查询
            logger.info("延时前:"+ new Date().toString());
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            logger.info("延时后:"+ new Date().toString());
            HashMap hashMap = (HashMap) responseResult.getResult();
            ResponseModel responseModelResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/result", hashMap, ResponseModel.class);
            logger.info("seccessful stop server , select ststus is {} result is {} " + responseModelResult.getStatus() + responseModelResult.getResult());
            int length = DepartmentServiceImpl.getLength(responseModelResult.getResult());
            if(length < 2){
                return ResponseModel.fail(CommonParams.STOP_MODEL_FAIL,-1);
            }
        }else{
            logger.error("controlServer not first run error ,message is {}", responseResult.getMessage());
        }
        return responseResult;
    }

    /**
     * @param storeId
     * @param deviceId
     * @param edgeServerInitvO
     * @return 删除模型
     */
    @Override
    public ResponseModel deleteModel(Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO) {
         // 是否运行中，如在使用需停止再删除
        String key = edgeServerInitvO.getSoftwareCode() + "-" + edgeServerInitvO.getModelCode();
        if(StringUtils.isNotBlank(key)){
            String forValue = redisHelper.getForValue(key);
            logger.info("model heartbeat , redis key {} , get value is {} " + key + forValue);
            if(StringUtils.isNotBlank(forValue)){
                if(forValue.equals(CommonParams.DEPARTMENT_DEVICE_STATUS)){
                    return ResponseModel.fail("请先停止服务再删除！",-1);
                }
            }
        }
        int i = softwareMapper.deleteModelById(edgeServerInitvO.getModelCode());
        return ResponseModel.ok(0);
    }

    @Override
    public ResponseModel updateEdgeDeviceConfig(EdgeDeviceConfig edgeDeviceConfig,  String deviceId) {
        StringBuilder config = new StringBuilder();
        config.append(edgeDeviceConfig.getDeviceConfig() + "\n" +
                "network:\n" + edgeDeviceConfig.getNetWork() +
                "\n" +
                "mac:\n" +
                edgeDeviceConfig.getMac());
        int i = deviceMapper.updateDeviceConfigByCode(deviceId, config.toString());
        if(i > 0){
            return ResponseModel.ok(i);
        }
        return ResponseModel.fail("更新失败", -1);
    }

    /**
     * @param type
     * @param installAndDeploy
     * @return  上传工具包
     */
    @Override
    public ResponseModel uploadInstrument(HardwareDeploymentFile hardwareDeploymentFile,MultipartFile file) {
        ResponseModel responseModel = resourceServiceImpl.uploadOSystem(file, CommonParams.HARDWARE_CONFIG_FILE);
        String deploymentFilePath = "";
        if(0 == responseModel.getStatus()){
            HashMap<String,String> map = (HashMap<String,String>)responseModel.getResult();
            String filePath = map.get(CommonParams.FILE_PATH);
            if(!org.springframework.util.StringUtils.isEmpty(filePath)){
                deploymentFilePath = filePath;
            }
            hardwareDeploymentFile.setDeploymentFileName(file.getOriginalFilename());
            hardwareDeploymentFile.setDeploymentFilePath(deploymentFilePath);
            hardwareDeploymentFile.setDeploymentFileSize(file.getSize());
        }
        hardwareDeploymentFile.setdId(-1);
        int i = 0;
        // 上传还是修改
        HardwareDeploymentFile oldHardwareDeploymentFile = hardwareMapper.selectHardwareInstrument(hardwareDeploymentFile.getType());
        if(null != oldHardwareDeploymentFile){
            i = hardwareMapper.updateHardwareInstrument(hardwareDeploymentFile);
        }else{
            i = hardwareMapper.insertHardwareDeploymentFile(hardwareDeploymentFile);
        }
        if(i > 0){
            return ResponseModel.ok(i);
        }
        return ResponseModel.fail("更新失败", -1);
    }

    /**
     * @param type
     * @return 查询工具包
     */
    @Override
    public ResponseModel selectInstrument(String type) {
        HardwareDeploymentFile hardwareDeploymentFile = hardwareMapper.selectHardwareInstrument(type);
        return ResponseModel.ok(hardwareDeploymentFile);
    }

    /**
     * @param type
     * @param storeId
     * @param deviceId
     * @param edgeServerInitvO
     * @return 修改配置
     */
    @Override
    public ResponseModel updateConfig(String type, Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO) {

        HashMap<String, Object> hashMapResult = new HashMap<>();
        if(CommonParams.MODEL.equals(type)){
            hashMapResult.put("path","/opt/"+ edgeServerInitvO.getSoftwareCode() +"/"+ edgeServerInitvO.getVersion() +"/"+edgeServerInitvO.getModelCode());
        }else{
            hashMapResult.put("path","/opt/remora_agent/configs/config.yaml");
        }
        return modifyTheConfiguration(storeId, deviceId, edgeServerInitvO,hashMapResult,type);
    }

    /**
     * @param modelConfigLog
     * @param storeId
     * @param deviceId
     * @return  记录模型日志
     */
    @Override
    public ResponseModel insertModelConfigLog(ModelConfigLog modelConfigLog, Integer storeId, Integer deviceId) {
        if(null == modelConfigLog && StringUtils.isBlank(modelConfigLog.getContent())){
            return ResponseModel.fail("log content is null",-1);
        }
        modelConfigLog.setStoreId(storeId);
        modelConfigLog.setEdgeServerId(deviceId);
        modelConfigLog.setCreateTime(TimeUtil.getDateToString(modelConfigLog.getTimestamp()));
        softwareMapper.insertModelConfigLog(modelConfigLog);
        return ResponseModel.ok("success");
    }

    @Override
    public ResponseModel getLog(Integer departmentId, String startTime, String endTime) {
        List<ModelLog> modelLogs = departmentMapper.getLog(departmentId,startTime,endTime);
        return ResponseModel.ok(modelLogs);
    }

    /**
     * @param storeId
     * @param deviceId
     * @param edgeServerInitvO
     * @return 修改配置-- 模型
     */
    public ResponseModel modifyTheConfiguration(Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO,HashMap<String, Object> hashMapResult,String type) {
        String base64RunScript = "";
        if(StringUtils.isNotBlank(edgeServerInitvO.getContent())){
            Base64 base64 = new Base64();
            try {
                base64RunScript = base64.encodeToString(edgeServerInitvO.getContent().getBytes("UTF-8"));
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            hashMapResult.put("content",base64RunScript);
            logger.info("start update config, modelcode is {}",edgeServerInitvO.getModelCode());
            // 1. 调用修改配置
            ResponseModel responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "/aimigos/v1/project/" + storeId + "/device/" + deviceId+ "/init", hashMapResult, ResponseModel.class);
            if(responseResult.getStatus() == 0){
                //  2. 延迟查询
                logger.info("延时前:"+ new Date().toString());
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                logger.info("延时后:"+ new Date().toString());
                HashMap hashMap = (HashMap) responseResult.getResult();
                ResponseModel responseModelResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/result", hashMap, ResponseModel.class);
                logger.info("seccessful request reStsrt server , select ststus is {} result is {} " + responseModelResult.getStatus() + responseModelResult.getResult());
                int length = DepartmentServiceImpl.getLength(responseModelResult.getResult());
                // 3. 查询结果lenth>2 并且内置 status=0
                if(length >= 2){
                    List<LinkedHashMap<String,Object>> resultMaps = ( List<LinkedHashMap<String,Object>> )responseModelResult.getResult();
                    for(LinkedHashMap<String,Object> link : resultMaps){
                        Iterator it = link.entrySet().iterator();
                        while (it.hasNext()) {
                            Map.Entry entry = (Map.Entry) it.next();
                            if(entry.getKey().equals("message")){
                                LinkedHashMap<String,Object> value = (LinkedHashMap<String,Object>)entry.getValue();
                                if(value.keySet().contains("status")){
                                    int status = (int)value.get("status");
                                    if(status == 0){
                                        // 4. 成功调用后修改本地
                                        if(CommonParams.MODEL.equals(type)){
                                            softwareMapper.updateSoftwareConfigByModelCode(edgeServerInitvO.getModelCode(),edgeServerInitvO.getContent());
                                        }else {
                                            deviceMapper.updateDeviceConfig(deviceId,edgeServerInitvO.getContent());
                                        }
                                        return ResponseModel.ok(CommonParams.SELECT_RESULT_SUCCESS);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }else{
            return ResponseModel.fail(CommonParams.UPDATE_CONFIG_CONTENT_NULL,-1);
        }
        return ResponseModel.fail(CommonParams.SELECT_RESULT_FAIL,-1);
    }

    /**
     * @param serverStatus
     * @param ServerCode  "tx2_code -  software_code"
     * @return  controlService 发送消息 - 监控服务(模型)的状态  0 ：正常 1:异常
     */
    @Override
    public ResponseModel getHeartForServer(ServerStatus serverStatus) {

        List<ServerStatus> serverStatusList = serverStatus.getServerStatusList();

        try{
            if(null != serverStatusList && serverStatusList.size() > 0){
                for(ServerStatus status : serverStatusList){
                    String stu = status.getStatus() == 0 ? CommonParams.DEPARTMENT_DEVICE_STATUS : CommonParams.DEPARTMENT_DEVICE_NOT_STATUS;
                    redisHelper.setForValue(status.getServerCode(),stu);
                }
            }
        }catch (Exception e){
            logger.error("redis save error");
        }

        return ResponseModel.ok(0);
    }

    /**
     * @param name
     * @param storeId
     * @param deviceId
     * @return  手动重启模型
     */
    @Override
    public ResponseModel reStartToContrlServer(String name, Integer storeId, Integer deviceId) {
        // run 服务 -重启而已
        HashMap<String,Object> message = new HashMap<>();
        String[] split = name.split("\\.");
        message.put("name",split[0]);
        ResponseModel responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/project/" + storeId + "/device/" + deviceId + "/model/restart", message, ResponseModel.class);
        if(responseResult.getStatus() == 0){
            // 延迟查询
            logger.info("延时前:"+ new Date().toString());
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            logger.info("延时后:"+ new Date().toString());
            HashMap hashMap = (HashMap) responseResult.getResult();
            ResponseModel responseModelResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/result", hashMap, ResponseModel.class);
            logger.info("seccessful request reStsrt server , select ststus is {} result is {} " + responseModelResult.getStatus() + responseModelResult.getResult());
            int length = DepartmentServiceImpl.getLength(responseModelResult.getResult());
            if(length < 2){
                return ResponseModel.fail(CommonParams.SELECT_RESULT_FAIL,1);
            }
        }else{
            logger.error("controlServer not first run error ,message is {}", responseResult.getMessage());
        }
        return responseResult;
    }
    /**
     * @param edgeServerInitvO,
     * @param storeId
     * @param deviceId
     * @return 模型升级
     */
    @Override
    public ResponseModel upgradeVersionForModel(Integer storeId, Integer deviceId, EdgeServerInitVo edgeServerInitvO, HttpServletResponse response) {

        // 通知controlServer 模型更新
        List<EdgeServerInitVo> edgeServerInitList = edgeServerInitvO.getEdgeServerInitList();
        
        int i = 0;
        for(EdgeServerInitVo edgeServerInit :edgeServerInitList){
            HashMap<String,Object> hashMap = new HashMap();
            hashMap.put("softwareCode", edgeServerInit.getSoftwareCode());
            hashMap.put("modelCode", edgeServerInit.getModelCode());

            Software software = softwareMapper.selectByCode(edgeServerInit.getSoftwareCode());
            hashMap.put("version",software.getVersion());
            hashMap.put("name",software.getFileName());
            hashMap.put("url", software.getFilePath());
            ResponseModel responseResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/project/" + storeId + "/device/" + deviceId + "/model/upgrade", hashMap, ResponseModel.class);
            if(responseResult.getStatus() != 0){
                logger.error("controlServer not first run error ,message is {}", responseResult.getMessage());
                return responseResult;
            }else{
                // 延迟查询
                logger.info("延时前:"+ new Date().toString());
                try {
                    Thread.sleep(1000 * 25);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                logger.info("延时后:"+ new Date().toString());
                HashMap hashMapResult = (HashMap) responseResult.getResult();
                ResponseModel responseModelResult = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/result", hashMapResult, ResponseModel.class);
                logger.info("seccessful update software model package, select ststus is {} result is {} " + responseModelResult.getStatus() + responseModelResult.getResult());
                int length = DepartmentServiceImpl.getLength(responseModelResult.getResult());
                if(length < 2){
                    response.setStatus(500);
                    return ResponseModel.fail(CommonParams.SELECT_RESULT_FAIL,1);
                }
            }
            // 成功后修改本地版本号
            i = softwareMapper.updateVersion(storeId,deviceId,software.getId(),software.getVersion(),software.getFileName(),software.getFilePath());
        }

        return ResponseModel.ok(i);
    }
    /**
     * @param storeId
     * @param deviceId
     * @return 手动重启tx2
     */
    @Override
    public ResponseModel reStartTx2(Integer storeId, Integer deviceId) {

        HashMap<String,Object> message = new HashMap<>();
        message.put("run_type","now");
        message.put("shell","IyEvYmluL2Jhc2gKL3NiaW4vcmVib290Cg==");
        message.put("time","");
        message.put("arg","");
        // 1. 重启tx2
        restTemplate.postForObject(CONTROL_SERVER_INIT + "api/aimigos/" + storeId  + "/" + deviceId + "/command/execute", message, ResponseModel.class);
        // 延迟启动模型
        logger.info("延时前:"+ new Date().toString());
        try {
            Thread.sleep(2000 * 60);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        logger.info("延时后:"+ new Date().toString());

        // 2. 重启tx2关联所有模型
        List<SoftwareConfig> softwareConfigs = softwareMapper.selectSoftwareConfigForCanUse(storeId, deviceId);

        for(SoftwareConfig so : softwareConfigs){
            EdgeServerInitVo edgeServerInitvO = new EdgeServerInitVo();
            edgeServerInitvO.setSoftwareCode(so.getsCode());
            edgeServerInitvO.setModelCode(so.getCode());
            run( storeId, deviceId, edgeServerInitvO);
        }

        return ResponseModel.ok("重启服务完成");
    }

    /**
     * @param storeId
     * @param deviceId
     * @return 手动修改进店线配置
     */
    @Override
    public ResponseModel updateLineIntotheShop(Integer storeId, Integer deviceId,EdgeServerInitVo edgeServerInitvO) {

        ResponseModel responseModel = new ResponseModel();
        // 1.校验是否可以初始化<安装摄像头校对图审核通过>
        List<DepartmentDevice> departmentDevices = deviceMapper.getDepartmentEdgeDevicedetail(storeId);
        for(DepartmentDevice departmentDevice :departmentDevices){
            if(departmentDevice.geteType().equals("edge")){
                continue;
            }
            if(departmentDevice.getInstallStatus() != 3){
                return ResponseModel.fail("存在摄像头未校对成功",-1);
            }
        }

        HashMap<String, Object> smartStoreAddHashmap = initModelParam(storeId, deviceId, edgeServerInitvO);
       /* HashMap<String, Object> sendAddHashmap = new HashMap<>();
        HashMap<String, Object> smartStoreAddHashmap = new HashMap<>();

        smartStoreAddHashmap.put("softwareCode",edgeServerInitvO.getSoftwareCode());
        smartStoreAddHashmap.put("modelCode",edgeServerInitvO.getModelCode());
        // 1.查询设备信息
        DepartmentDevice departmentDevice = deviceMapper.selectByDepartmentIdAndDeviceId(storeId,deviceId);
        // 2.BtitdCode
        Department department = departmentMapper.selectByPrimaryKey(storeId);


        // 3.修改进店摄像头的画线数据的相关配置
        HashMap<String, Object> hashMap2 = selectDepartmentInstallFile(storeId,null);
        // 3.获取摄像头画图线数据
        if(null != hashMap2.get(departmentDevice.getId().toString())){
            HashMap<String, Object> oldValue = JSONObject.parseObject(hashMap2.get(departmentDevice.getId().toString()).toString(), HashMap.class);
            if(null != oldValue.get("url") && null != oldValue.get("lineList")){
                String url = (String) oldValue.get("url");

                List<CameraCoordinates> lineList = JSONArray.parseArray(oldValue.get("lineList").toString(), CameraCoordinates.class);
                for(CameraCoordinates cameraCoordinates : lineList){
                    if(cameraCoordinates.getLineType() == 0){
                        // 进店摄像头的数据 - 视频流地址
                        sendAddHashmap.put("video_source",url);
                        sendAddHashmap.put("sid",department.getBtitdCode());
                        sendAddHashmap.put("eid",deviceId);
                        sendAddHashmap.put("cid",departmentDevice.getId());

                        // 进店摄像头的画线数据
                        ControlServerCameraLineList cameraLineList1 = new ControlServerCameraLineList();
                        int[] lineStart = {(int)cameraCoordinates.getStartX(),(int)cameraCoordinates.getStartY()};
                        int[] lineEnd = {(int)cameraCoordinates.getEndX(),(int)cameraCoordinates.getEndY()};
                        int[] directionStart = {(int)cameraCoordinates.getArrowsStartX(),(int)cameraCoordinates.getArrowsStartY()};
                        int[] directionEnd = {(int)cameraCoordinates.getArrowsEndX(),(int)cameraCoordinates.getArrowsEndY()};
                        cameraLineList1.setLineStart(lineStart);
                        cameraLineList1.setLineEnd(lineEnd);
                        cameraLineList1.setDirectionEnd(directionStart);
                        cameraLineList1.setDirectionStart(directionEnd);

                        smartStoreAddHashmap.put("ENTER_JUDGMENT",cameraLineList1);
                        smartStoreAddHashmap.put("SEND",sendAddHashmap);
                    }
                }
            }
        }*/
        // 4.发送controlServer
        if( null != smartStoreAddHashmap){
             responseModel = restTemplate.postForObject(CONTROL_SERVER_INIT + "aimigos/v1/project/"+ storeId +"/device/"+ deviceId +"/model/changeConfig", smartStoreAddHashmap, ResponseModel.class);
            if(responseModel.getStatus() != 0) {
                logger.error("controlServer not first run error ,message is {}", responseModel.getMessage());
            }else {
                // 更新配置文件备份，执行脚本
                List<ModelInitResult> modelInitResults = (List<ModelInitResult>) responseModel.getResult();
                if(modelInitResults.size() > 0 && null != modelInitResults){
                   softwareMapper.updateSoftwareConfig(modelInitResults,storeId,deviceId);
                }
                // 修改成功后重启
                run(storeId, deviceId, edgeServerInitvO);
            }
        }

        return responseModel;
    }


}
